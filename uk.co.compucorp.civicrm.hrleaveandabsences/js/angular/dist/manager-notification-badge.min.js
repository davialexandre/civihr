eval("/* eslint-env amd */\n\n(function (require) {\n  define('leave-absences/shared/config',[],function () {\n    var srcPath = CRM.vars.leaveAndAbsences.baseURL + '/js/angular/src/leave-absences/shared';\n\n    // This require.config will picked up by the r.js optimizer\n    require.config({\n      paths: {\n        'leave-absences/shared/ui-router': 'leave-absences/shared/vendor/angular-ui-router.min',\n        'mocks': '../test/mocks'\n      },\n      shim: {\n        'leave-absences/shared/ui-router': {}\n      }\n    });\n\n    // This require.config will be used by the \"live\" RequireJS (with debug ON)\n    require.config({\n      paths: {\n        'leave-absences/shared/ui-router': srcPath + '/vendor/angular-ui-router.min',\n        'mocks': CRM.vars.leaveAndAbsences.baseURL + '/js/angular/test/mocks'\n      }\n    });\n  });\n})(require);\n\n//# sourceURL=/leave-absences/shared/config.js"),eval("/* eslint-env amd */\n\n(function (CRM) {\n  define('leave-absences/shared/modules/shared-settings',[\n    'common/angular'\n  ], function (angular) {\n    return angular.module('leave-absences.settings', []).constant('shared-settings', {\n      attachmentToken: CRM.vars.leaveAndAbsences.attachmentToken,\n      debug: CRM.debug,\n      managerPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/manager-leave/',\n      sharedPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/shared/',\n      serverDateFormat: 'YYYY-MM-DD',\n      serverDateTimeFormat: 'YYYY-MM-DD HH:mm:ss',\n      permissions: {\n        admin: {\n          access: 'access leave and absences',\n          administer: 'administer leave and absences'\n        },\n        ssp: {\n          access: 'access leave and absences in ssp',\n          manage: 'manage leave and absences in ssp'\n        }\n      },\n      fileUploader: {\n        queueLimit: 10\n      },\n      statusNames: {\n        approved: 'approved',\n        adminApproved: 'admin_approved',\n        awaitingApproval: 'awaiting_approval',\n        moreInformationRequired: 'more_information_required',\n        rejected: 'rejected',\n        cancelled: 'cancelled'\n      }\n    });\n  });\n})(CRM);\n\n//# sourceURL=/leave-absences/shared/modules/shared-settings.js"),eval("define('leave-absences/shared/modules/apis',[\n  'common/angular',\n  'common/modules/apis',\n  'leave-absences/shared/modules/shared-settings',\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.apis', [\n    'common.apis',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/leave-absences/shared/modules/apis.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models-instances',[\n  'common/angular',\n  'common/models/instances/instance',\n  'common/modules/services',\n  'common/modules/models',\n  'common/services/check-permissions',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models.instances', [\n    'common.models',\n    'common.models.instances',\n    'common.services',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/leave-absences/shared/modules/models-instances.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models',[\n  'common/angular',\n  'common/modules/models',\n  'common/modules/services',\n  'leave-absences/shared/modules/apis',\n  'leave-absences/shared/modules/models-instances',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models', [\n    'common.models',\n    'common.services',\n    'leave-absences.apis',\n    'leave-absences.models.instances',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/leave-absences/shared/modules/models.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/apis/leave-request.api',[\n  'leave-absences/shared/modules/apis',\n  'common/lodash',\n  'common/services/api'\n], function (apis, _) {\n  'use strict';\n\n  apis.factory('LeaveRequestAPI', ['$log', 'api', '$q', 'shared-settings',\n    function ($log, api, $q) {\n      $log.debug('LeaveRequestAPI');\n\n      return api.extend({\n\n        /**\n         * This method returns all the Leave Requests.\n         * It supports filters, pagination, sort and extra params\n         *\n         * @param {object} filters - Values the full list should be filtered by\n         * @param {object} pagination\n         *   `page` for the current page, `size` for number of items per page\n         * @param {string} sort - The field and direction to order by\n         * @param  {Object} params\n         * @param  {Boolean} cache\n         * @return {Promise} Resolved with {Object} All leave requests\n         */\n        all: function (filters, pagination, sort, params, cache) {\n          $log.debug('LeaveRequestAPI.all');\n          var defer = $q.defer();\n\n          // if contact_id has an empty array for IN condition, there is no point making the\n          // call to the Leave Request API\n          // TODO Move to Base API\n          if (filters && filters.contact_id && filters.contact_id.IN && filters.contact_id.IN.length === 0) {\n            defer.resolve({ list: [], total: 0, allIds: [] });\n          } else {\n            defer.resolve(this.getAll('LeaveRequest', filters, pagination, sort, params, 'getFull', cache));\n          }\n\n          return defer.promise;\n        },\n\n        /**\n         * This method returns all the total change in balance that is caused by the\n         * leave requests of a given absence type, or of all the absence types of a given contact and period.\n         *\n         * @param {string} contactId The ID of the Contact to get the balance change for\n         * @param {string} periodId The ID of the Absence Period to get the balance change for\n         * @param {array} [statuses = null] An array of OptionValue values which the list will be filtered by\n         * @param {boolean} [isPublicHoliday=false] Based on the value of this param,\n         * the calculation will include only the leave requests that aren't/are public holidays\n         * @return {Promise} Resolved with {Object} Balance Change data or Error data\n         */\n        balanceChangeByAbsenceType: function (contactId, periodId, statuses, isPublicHoliday) {\n          $log.debug('LeaveRequestAPI.balanceChangeByAbsenceType');\n          var deferred = $q.defer();\n\n          if (!contactId || !periodId) {\n            deferred.reject('contact_id and period_id are mandatory');\n          }\n\n          var params = {\n            contact_id: contactId,\n            period_id: periodId,\n            statuses: statuses ? {'IN': statuses} : null,\n            public_holiday: isPublicHoliday || false\n          };\n\n          this.sendGET('LeaveRequest', 'getbalancechangebyabsencetype', params, false)\n          .then(function (data) {\n            deferred.resolve(data.values);\n          });\n\n          return deferred.promise;\n        },\n\n        /**\n         * Gets the overall balance change after a leave request is created. The\n         * API will create and return the detailed breakdown of it in days.\n         *\n         * @param {Object} params matched the API end point params like\n         * mandatory values for contact_id, from_date, from_date_type and optional values for\n         * to_date and to_date_type.\n         *\n         * @return {Promise} containing the detailed breakdown of balance leaves\n         */\n        calculateBalanceChange: function (params) {\n          $log.debug('LeaveRequestAPI.calculateBalanceChange', params);\n\n          return this.sendPOST('LeaveRequest', 'calculatebalancechange', params)\n            .then(function (data) {\n              // The breakdown property in the API response has been changed\n              // from an array collection to an indexed collection (object),\n              // so a transformation is needed to support the current code\n              data.values.breakdown = _.values(data.values.breakdown);\n\n              return data.values;\n            });\n        },\n\n        /**\n         * Gets the balance change breakdown\n         * @NOTE: This breakdown is not affected by a work pattern change\n         *\n         * @param  {Integer} leaveRequestId Leave Request ID\n         * @return {Promise} resolves with the detailed balance breakdown\n         */\n        getBalanceChangeBreakdown: function (leaveRequestId) {\n          return this.sendGET('LeaveRequest', 'getBreakdown',\n            { leave_request_id: leaveRequestId }, false);\n        },\n\n        /**\n         * Get the \"from\" and \"to\" times and number of hours\n         *   for a given date according to the current work pattern\n         *\n         * @param  {String} leaveDate in the \"YYYY-MM-DD\" format\n         * @param  {String|Number} contactId\n         * @return {Promise} resolved with the response\n         *   as per LeaveRequest.getWorkDayForDate API\n         */\n        getWorkDayForDate: function (date, contactId) {\n          return this.sendGET('LeaveRequest', 'getWorkDayForDate',\n            { leave_date: date, contact_id: contactId.toString() }, false);\n        },\n\n        /**\n         * Create a new leave request with given params.\n         *\n         * @param {Object} params matched the API end point params with\n         * mandatory values for contact_id, status_id, from_date, from_date_type\n         * and optional values for to_date and to_date_type.\n         * If to_date is given then to_date_type is also mandotory.\n         *\n         * @return {Promise} containing the leave request object additionally with id key set\n         * else rejects the promise with error data\n         */\n        create: function (params) {\n          $log.debug('LeaveRequestAPI.create', params);\n\n          return this.sendPOST('LeaveRequest', 'create', params)\n            .then(function (data) {\n              return data.values[0];\n            });\n        },\n\n        /**\n         * Calls the `delete` endpoint with the given leave request id\n         *\n         * @param  {int/string} id\n         * @return {Promise}\n         */\n        delete: function (id) {\n          return this.sendPOST('LeaveRequest', 'delete', { id: id });\n        },\n\n        /**\n         * Calls the deletecomment backend API.\n         *\n         * @param {String} leaveRequestID - leave request ID\n         * @param {String} attachmentID - attachment ID\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        deleteAttachment: function (leaveRequestID, attachmentID, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID,\n            attachment_id: attachmentID\n          });\n\n          return this.sendPOST('LeaveRequest', 'deleteattachment', params)\n          .then(function (result) {\n            return result.values;\n          });\n        },\n\n        /**\n         * Calls the deletecomment backend API.\n         *\n         * @param {String} commentID - comment ID\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        deleteComment: function (commentID, params) {\n          params = _.assign({}, params, {\n            comment_id: commentID\n          });\n\n          return this.sendPOST('LeaveRequest', 'deletecomment', params)\n          .then(function (commentsData) {\n            return commentsData.values;\n          });\n        },\n\n        /**\n         * Get leave request for the given id\n         *\n         * @param {object} id - leave request id\n         *\n         * @return {Promise} resolves with {Object}\n         */\n        find: function (id) {\n          $log.debug('LeaveRequestAPI.find');\n\n          return this.sendGET('LeaveRequest', 'getFull', { id: id })\n          .then(function (response) {\n            if (response.values.length === 0) {\n              return $q.reject('LeaveRequest not found with this ID');\n            }\n\n            return response.values[0];\n          });\n        },\n\n        /**\n         * Calls the getattachments backend API.\n         *\n         * @param {String} leaveRequestID - ID of leave request\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        getAttachments: function (leaveRequestID, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID\n          });\n\n          return this.sendGET('LeaveRequest', 'getattachments', params, false)\n          .then(function (attachments) {\n            return attachments.values;\n          });\n        },\n\n        /**\n         * Calls the getcomment backend API.\n         *\n         * @param {String} leaveRequestID - ID of leave request\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        getComments: function (leaveRequestID, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID\n          });\n\n          return this.sendGET('LeaveRequest', 'getcomment', params, false)\n          .then(function (commentsData) {\n            return commentsData.values;\n          });\n        },\n\n        /**\n         * Calls the isManagedBy backend API.\n         *\n         * @param {String} leaveRequestID - ID of leave request\n         * @param {String} contactID - ID of contact\n         * @return {Promise} resolves with an {Boolean}\n         */\n        isManagedBy: function (leaveRequestID, contactID) {\n          $log.debug('LeaveRequestAPI.isManagedBy');\n\n          return this.sendPOST('LeaveRequest', 'isManagedBy', {\n            leave_request_id: leaveRequestID,\n            contact_id: contactID\n          })\n          .then(function (response) {\n            return response.values;\n          });\n        },\n\n        /**\n         * Validate params for a new new leave request. It can be used before\n         * creating a leave request to validate data.\n         *\n         * @param {Object} params matched the API end point params with\n         * values like contact_id, status_id, from_date, from_date_type etc.,\n         * @return {Promise} returns an array of errors for invalid data else empty array\n         */\n        isValid: function (params) {\n          $log.debug('LeaveRequestAPI.isValid', params);\n          var deferred = $q.defer();\n\n          this.sendPOST('LeaveRequest', 'isValid', params)\n          .then(function (data) {\n            if (data.count > 0) {\n              deferred.reject(_(data.values).map().flatten().value());\n            } else {\n              deferred.resolve(data.values);\n            }\n          });\n\n          return deferred.promise;\n        },\n\n        /**\n         * Calls the addcomment backend API.\n         *\n         * @param {string} leaveRequestID - ID of Leave Request\n         * @param {Object} comment - Comment object\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        saveComment: function (leaveRequestID, comment, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID,\n            text: comment.text,\n            contact_id: comment.contact_id\n          });\n\n          return this.sendPOST('LeaveRequest', 'addcomment', params)\n          .then(function (commentsData) {\n            return commentsData.values;\n          });\n        },\n\n        /**\n         * This method is used to update a leave request\n         *\n         * @param {object} params - Updated values of leave request\n         * @return {Promise} Resolved with {Object} Updated Leave request\n         */\n        update: function (params) {\n          $log.debug('LeaveRequestAPI.update', params);\n          var deferred = $q.defer();\n\n          if (!params.id) {\n            deferred.reject('id is mandatory field');\n          }\n\n          return this.sendPOST('LeaveRequest', 'create', params)\n          .then(function (data) {\n            return data.values[0];\n          });\n        }\n      });\n    }]);\n});\n\n//# sourceURL=/leave-absences/shared/apis/leave-request.api.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/instances/leave-request.instance',[\n  'common/lodash',\n  'leave-absences/shared/modules/models-instances',\n  'common/models/option-group',\n  'common/models/instances/instance'\n], function (_, instances) {\n  'use strict';\n\n  instances.factory('LeaveRequestInstance', ['$q', 'checkPermissions', 'OptionGroup',\n    'shared-settings', 'ModelInstance', 'LeaveRequestAPI',\n    function ($q, checkPermissions, OptionGroup, sharedSettings, ModelInstance, LeaveRequestAPI) {\n      /**\n       * Amends the first and last days of the balance by setting values from the\n       * selected time deductions. It also re-calculates the total amount.\n       *\n       * @param  {Object} balanceChange\n       */\n      function recalculateBalanceChange (balanceChange) {\n        _.first(_.values(balanceChange.breakdown)).amount = this['from_date_amount'];\n\n        if (balanceChange.breakdown.length > 1) {\n          _.last(_.values(balanceChange.breakdown)).amount = this['to_date_amount'];\n        }\n\n        balanceChange.amount = _.reduce(balanceChange.breakdown,\n          function (updatedChange, day) {\n            return updatedChange - day.amount;\n          }, 0);\n      }\n\n      /**\n       * Update status ID\n       *\n       * @param {string} status - name of the option value\n       * @return {Promise} Resolved with {Object} - Error Data in case of error\n       */\n      function changeLeaveStatus (status) {\n        return getOptionIDByName(status)\n          .then(function (statusId) {\n            var originalStatus = this.status_id;\n\n            this.status_id = statusId.value;\n            return this.update()\n              .catch(function (error) {\n                // Revert status id back in case of exception\n                this.status_id = originalStatus;\n\n                return $q.reject(error);\n              }.bind(this));\n          }.bind(this));\n      }\n\n      /**\n       * Checks if a LeaveRequest is of a specific type\n       *\n       * @param {string} statusName - name of the option value\n       * @return {Promise} Resolved with {Boolean}\n       */\n      function checkLeaveStatus (statusName) {\n        return getOptionIDByName(statusName)\n          .then(function (statusObj) {\n            return this.status_id === statusObj.value;\n          }.bind(this));\n      }\n\n      /**\n       * Deletes the given attachment from server. It iterates through local\n       * files array to find which are to be deleted and deletes them.\n       *\n       * @return {Promise}\n       */\n      function deleteAttachments () {\n        var promises = [];\n\n        _.forEach(this.files, function (file) {\n          if (file.toBeDeleted) {\n            promises.push(LeaveRequestAPI.deleteAttachment(this.id, file.attachment_id));\n          }\n        }.bind(this));\n\n        return $q.all(promises);\n      }\n\n      /**\n       * Get ID of an option value\n       *\n       * @param {string} name - name of the option value\n       * @return {Promise} Resolved with {Object} - Specific leave request\n       */\n      function getOptionIDByName (name) {\n        return OptionGroup.valuesOf('hrleaveandabsences_leave_request_status')\n          .then(function (data) {\n            return data.find(function (statusObj) {\n              return statusObj.name === name;\n            });\n          });\n      }\n\n      /**\n       * Save comments which do not have an ID and delete comments which are marked for deletion\n       *\n       * @return {Promise}\n       */\n      function saveAndDeleteComments () {\n        var leaveRequestId = this.id;\n        var promises = [];\n\n        // Pushing a chain of API calls to create new comments sequentially\n        promises.push($q.sequence(this.comments.filter(function (comment) {\n          return !comment.comment_id;\n        }).map(function (comment) {\n          return function () {\n            return LeaveRequestAPI.saveComment(leaveRequestId, comment);\n          };\n        })));\n\n        // Deleting comments can done in parallel, no need in a promise chain\n        promises = promises.concat(this.comments.filter(function (comment) {\n          return comment.comment_id && comment.toBeDeleted;\n        }).map(function (comment) {\n          return LeaveRequestAPI.deleteComment(comment.comment_id);\n        }));\n\n        return $q.all(promises);\n      }\n\n      return ModelInstance.extend({\n\n        /**\n         * Returns the default custom data (as in, not given by the API)\n         * with its default values\n         *\n         * @return {object}\n         */\n        defaultCustomData: function () {\n          return {\n            comments: [],\n            files: [],\n            request_type: 'leave'\n          };\n        },\n\n        /**\n         * Gets the current balance change according to a current work pattern\n         *\n         * @param  {String} calculationUnit (days|hours)\n         * @return {Promise} resolves to an object containing\n         *   a balance change amount and a detailed breakdown\n         */\n        calculateBalanceChange: function (calculationUnit) {\n          var params = ['contact_id', 'from_date', 'to_date', 'type_id', 'from_date_type', 'to_date_type'];\n\n          if (calculationUnit === 'hours') {\n            _.pull(params, 'from_date_type', 'to_date_type');\n          }\n\n          return LeaveRequestAPI.calculateBalanceChange(_.pick(this, params))\n            .then(function (balanceChange) {\n              if (calculationUnit === 'hours') {\n                recalculateBalanceChange.call(this, balanceChange);\n              }\n\n              return balanceChange;\n            }.bind(this));\n        },\n\n        /**\n         * Cancel a leave request\n         */\n        cancel: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.cancelled);\n        },\n\n        /**\n         * Approve a leave request\n         */\n        approve: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.approved);\n        },\n\n        /**\n         * Reject a leave request\n         */\n        reject: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.rejected);\n        },\n\n        /**\n         * Sends a leave request back as more information is required\n         */\n        sendBack: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.moreInformationRequired);\n        },\n\n        /**\n         * Update a leave request\n         *\n         * @return {Promise} Resolved with {Object} Updated Leave request\n         */\n        update: function () {\n          return LeaveRequestAPI.update(this.toAPI())\n            .then(function () {\n              return $q.all([\n                saveAndDeleteComments.call(this),\n                deleteAttachments.call(this)\n              ]);\n            }.bind(this));\n        },\n\n        /**\n         * Create a new leave request\n         *\n         * @return {Promise} Resolved with {Object} Created Leave request with\n         *  newly created id for this instance\n         */\n        create: function () {\n          return LeaveRequestAPI.create(this.toAPI())\n            .then(function (result) {\n              this.id = result.id;\n\n              return $q.all([\n                saveAndDeleteComments.call(this)\n              ]);\n            }.bind(this));\n        },\n\n        /**\n         * Sets the flag to mark file for deletion. The file is not yet deleted\n         * from the server.\n         *\n         * @param {Object} file - Attachment object\n         */\n        deleteAttachment: function (file) {\n          if (!file.toBeDeleted) {\n            file.toBeDeleted = true;\n          }\n        },\n\n        /**\n         * Removes a comment from memory\n         *\n         * @param {Object} commentObj - comment object\n         */\n        deleteComment: function (commentObj) {\n          // If its an already saved comment, mark a toBeDeleted flag\n          if (commentObj.comment_id) {\n            commentObj.toBeDeleted = true;\n            return;\n          }\n\n          this.comments = _.reject(this.comments, function (comment) {\n            return commentObj.created_at === comment.created_at && commentObj.text === comment.text;\n          });\n        },\n\n        /**\n         * Deletes the leave request\n         *\n         * @return {Promise}\n         */\n        delete: function () {\n          return LeaveRequestAPI.delete(this.id);\n        },\n\n        /**\n         * Gets the balance change breakdown of the leave request\n         *\n         * @return {Promise}\n         */\n        getBalanceChangeBreakdown: function () {\n          return LeaveRequestAPI.getBalanceChangeBreakdown(this.id)\n            .then(function (response) {\n              return {\n                amount: _.reduce(response.values, function (sum, entry) {\n                  return sum + parseFloat(entry.amount);\n                }, 0),\n                breakdown: response.values.map(function (entry) {\n                  return {\n                    amount: parseFloat(entry.amount),\n                    date: entry.date,\n                    type: {\n                      id: entry.id,\n                      value: entry.type,\n                      label: entry.label\n                    }\n                  };\n                })\n              };\n            });\n        },\n\n        /**\n         * Gets info about work day for the date specified\n         *   for the contact the leave request belongs to\n         *\n         * @param {String} date in the \"YYYY-MM-DD\" format\n         */\n        getWorkDayForDate: function (date) {\n          return LeaveRequestAPI.getWorkDayForDate(date, this.contact_id)\n            .then(function (response) {\n              return response.values;\n            })\n            .catch(function (errors) {\n              return $q.reject(errors);\n            });\n        },\n\n        /**\n         * Validate leave request instance attributes.\n         *\n         * @return {Promise} empty array if no error found otherwise an object\n         *  with is_error set and array of errors\n         */\n        isValid: function () {\n          return LeaveRequestAPI.isValid(this.toAPI());\n        },\n\n        /**\n         * Checks if a LeaveRequest is Approved.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isApproved: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.approved);\n        },\n\n        /**\n         * Checks if a LeaveRequest is AwaitingApproval.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isAwaitingApproval: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.awaitingApproval);\n        },\n\n        /**\n         * Checks if a LeaveRequest is cancelled.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isCancelled: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.cancelled);\n        },\n\n        /**\n         * Checks if a LeaveRequest is Rejected.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isRejected: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.rejected);\n        },\n\n        /**\n         * Checks if a LeaveRequest is Sent Back.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isSentBack: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.moreInformationRequired);\n        },\n\n        /**\n         * Loads comments for this leave request.\n         *\n         * @return {Promise}\n         */\n        loadComments: function () {\n          if (this.id) {\n            return LeaveRequestAPI.getComments(this.id)\n              .then(function (comments) {\n                this.comments = comments;\n              }.bind(this));\n          }\n\n          return $q.resolve();\n        },\n\n        /**\n         * Check the role of a given contact in relationship to the leave request.\n         *\n         * @param {Object} contactId\n         * @return {Promise} resolves with an {String} - owner/admin/manager/none\n         */\n        roleOf: function (contactId) {\n          return (this.contact_id === contactId)\n            ? $q.resolve('owner')\n            : checkPermissions(sharedSettings.permissions.admin.administer)\n              .then(function (isAdmin) {\n                return isAdmin\n                  ? 'admin'\n                  : LeaveRequestAPI.isManagedBy(this.id, contactId)\n                    .then(function (isManager) {\n                      return isManager ? 'manager' : 'none';\n                    });\n              }.bind(this));\n        },\n\n        /**\n         * Override of parent method\n         *\n         * @param {object} result - The accumulator object\n         * @param {string} key - The property name\n         */\n        toAPIFilter: function (result, __, key) {\n          if (!_.includes(['balance_change', 'dates', 'comments', 'files'], key)) {\n            result[key] = this[key];\n          }\n        },\n\n        /**\n         * Loads file attachments associated with this leave request\n         *\n         * @return {Promise} with array of attachments if leave request is already created else empty promise\n         */\n        loadAttachments: function () {\n          if (this.id) {\n            return LeaveRequestAPI.getAttachments(this.id)\n              .then(function (attachments) {\n                this.files = attachments;\n              }.bind(this));\n          }\n\n          return $q.resolve();\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/leave-absences/shared/instances/leave-request.instance.js"),
eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/models/leave-request.model',[\n  'leave-absences/shared/modules/models',\n  'common/models/model',\n  'leave-absences/shared/apis/leave-request.api',\n  'leave-absences/shared/instances/leave-request.instance'\n], function (models) {\n  'use strict';\n\n  models.factory('LeaveRequest', [\n    '$log',\n    'Model',\n    'LeaveRequestAPI',\n    'LeaveRequestInstance',\n    function ($log, Model, leaveRequestAPI, instance) {\n      $log.debug('LeaveRequest');\n\n      return Model.extend({\n\n        /**\n         * Get all the Leave Requests.\n         * It supports filters, pagination, sort and extra params\n         *\n         * @param {object} filters - Values the full list should be filtered by\n         * @param {object} pagination\n         *   `page` for the current page, `size` for number of items per page\n         * @param {string} sort - The field and direction to order by\n         * @param  {Object} params\n         * @param  {Boolean} cache\n         * @return {Promise} resolves with {Object}\n         */\n        all: function (filters, pagination, sort, params, cache) {\n          return leaveRequestAPI.all(this.processFilters(filters), pagination, sort, params, cache)\n            .then(function (response) {\n              response.list = response.list.map(function (leaveRequest) {\n                return instance.init(leaveRequest, true);\n              });\n\n              return response;\n            });\n        },\n\n        /**\n         * Get all the total change in balance that is caused by the\n         * leave requests of a given absence type, or of all the absence types of a given contact and period.\n         *\n         * @param {string} contactId The ID of the Contact to get the balance change for\n         * @param {string} periodId The ID of the Absence Period to get the balance change for\n         * @param statuses {array} An array of OptionValue values which the list will be filtered by\n         * @param isPublicHoliday {boolean} Based on the value of this param,\n         * the calculation will include only the leave requests that aren't/are public holidays\n         * @return {Promise} Resolved with {Object} Balance Change data\n         */\n        balanceChangeByAbsenceType: function (contactId, periodId, statuses, isPublicHoliday) {\n          return leaveRequestAPI.balanceChangeByAbsenceType(contactId, periodId, statuses, isPublicHoliday);\n        },\n\n        /**\n         * Get leave request for the given id\n         *\n         * @param {object} id - leave request id\n         *\n         * @return {Promise} resolves with {Object}\n         */\n        find: function (id) {\n          return leaveRequestAPI.find(id)\n            .then(function (leaveRequest) {\n              return instance.init(leaveRequest, true);\n            });\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/leave-absences/shared/models/leave-request.model.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/components',[\n  'common/angular',\n  'common/modules/directives',\n  'common/modules/models',\n  './shared-settings',\n  './models'\n], function (angular) {\n  return angular.module('leave-absences.components', [\n    'common.directives',\n    'common.models',\n    'leave-absences.settings',\n    'leave-absences.models'\n  ]);\n});\n\n//# sourceURL=/leave-absences/shared/modules/components.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/components/leave-notification-badge.component',[\n  'leave-absences/shared/modules/components'\n], function (components) {\n  components.component('leaveNotificationBadge', {\n    bindings: {\n      filters: '<',\n      refreshCountEventName: '<'\n    },\n    templateUrl: ['shared-settings', function (sharedSettings) {\n      return sharedSettings.sharedPathTpl + 'components/leave-notification-badge.html';\n    }],\n    controllerAs: 'badge',\n    controller: LeaveNotificationBadgeController\n  });\n\n  LeaveNotificationBadgeController.$inject = ['$log', 'pubSub', 'LeaveRequest'];\n\n  function LeaveNotificationBadgeController ($log, pubSub, LeaveRequest) {\n    $log.debug('Component: leave-notification-badge');\n\n    var vm = this;\n    vm.count = 0;\n\n    (function init () {\n      initListeners();\n      fetchCount();\n    })();\n\n    /**\n     * Fetch count of leave requests which matches the filter\n     *\n     * @return {Promise}\n     */\n    function fetchCount () {\n      return LeaveRequest.all(vm.filters, null, null, null, false)\n        .then(function (leaveRequests) {\n          vm.count = leaveRequests.list.length;\n        });\n    }\n\n    /**\n     * Initializes the event listeners\n     */\n    function initListeners () {\n      pubSub.subscribe(vm.refreshCountEventName, fetchCount);\n    }\n  }\n});\n\n//# sourceURL=/leave-absences/shared/components/leave-notification-badge.component.js"),eval("/* eslint-env amd */\n\n(function (CRM) {\n  define('leave-absences/manager-notification-badge/modules/settings',[\n    'common/angular'\n  ], function (angular) {\n    return angular.module('manager-notification-badge.settings', []).constant('settings', {\n      debug: CRM.debug,\n      pathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/manager-notification-badge/'\n    });\n  });\n})(CRM);\n\n//# sourceURL=/leave-absences/manager-notification-badge/modules/settings.js"),eval("/* eslint-env amd */\n\n(function (CRM) {\n  define('leave-absences/manager-notification-badge/modules/config',[\n    'common/angular',\n    'leave-absences/manager-notification-badge/modules/settings'\n  ], function (angular) {\n    return angular.module('manager-notification-badge.config', ['manager-notification-badge.settings'])\n      .config([\n        '$resourceProvider', '$httpProvider', '$logProvider', 'settings',\n        function ($resourceProvider, $httpProvider, $logProvider, settings) {\n          $logProvider.debugEnabled(settings.debug);\n\n          $resourceProvider.defaults.stripTrailingSlashes = false;\n          $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n        }\n      ]);\n  });\n})(CRM);\n\n//# sourceURL=/leave-absences/manager-notification-badge/modules/config.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/manager-notification-badge/modules/components',[\n  'common/angular'\n], function (angular) {\n  return angular.module('manager-notification-badge.components', []);\n});\n\n//# sourceURL=/leave-absences/manager-notification-badge/modules/components.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/manager-notification-badge/components/manager-notification-badge.component',[\n  'common/lodash',\n  'leave-absences/manager-notification-badge/modules/components'\n], function (_, components) {\n  components.component('managerNotificationBadge', {\n    templateUrl: ['settings', function (settings) {\n      return settings.pathTpl + 'components/manager-notification-badge.html';\n    }],\n    controllerAs: 'managerNotificationBadge',\n    controller: ManagerNotificationBadgeController\n  });\n\n  ManagerNotificationBadgeController.$inject = ['$log', '$q', 'Session', 'OptionGroup', 'shared-settings'];\n\n  function ManagerNotificationBadgeController ($log, $q, Session, OptionGroup, sharedSettings) {\n    $log.debug('Component: manager-notification-badge');\n\n    var filters = {};\n    var vm = this;\n    vm.refreshCountEventName = 'ManagerBadge:: Update Count';\n\n    (function init () {\n      $q.all([\n        getManagerId(),\n        getStatusId()\n      ]).then(function () {\n        vm.filters = filters;\n      });\n    })();\n\n    /**\n     * Get the logged in contact id and save it as manager id\n     *\n     * @returns {Promise}\n     */\n    function getManagerId () {\n      return Session.get()\n        .then(function (session) {\n          filters.managed_by = session.contactId;\n        });\n    }\n\n    /**\n     * Get the status id for awaiting approval status\n     *\n     * @return {Promise}\n     */\n    function getStatusId () {\n      return loadStatuses()\n        .then(function (leaveRequestStatuses) {\n          filters.status_id = _.find(leaveRequestStatuses, function (status) {\n            return status.name === sharedSettings.statusNames.awaitingApproval;\n          }).value;\n        });\n    }\n\n    /**\n     * Loads all the leave request statuses\n     *\n     * @return {Promise}\n     */\n    function loadStatuses () {\n      return OptionGroup.valuesOf('hrleaveandabsences_leave_request_status');\n    }\n  }\n});\n\n//# sourceURL=/leave-absences/manager-notification-badge/components/manager-notification-badge.component.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/manager-notification-badge/app',[\n  'common/angular',\n  'common/models/session.model',\n  'common/services/pub-sub',\n  'leave-absences/shared/modules/shared-settings',\n  'leave-absences/shared/models/leave-request.model',\n  'leave-absences/shared/components/leave-notification-badge.component',\n  'leave-absences/manager-notification-badge/modules/config',\n  'leave-absences/manager-notification-badge/components/manager-notification-badge.component'\n], function (angular) {\n  angular.module('manager-notification-badge', [\n    'ngResource',\n    'leave-absences.settings',\n    'leave-absences.models',\n    'leave-absences.components',\n    'manager-notification-badge.components',\n    'manager-notification-badge.config'\n  ])\n  .run(['$log', function ($log) {\n    $log.debug('app.run');\n  }]);\n\n  return angular;\n});\n\n//# sourceURL=/leave-absences/manager-notification-badge/app.js"),eval("(function (CRM, require) {\n  var srcPath = CRM.vars.leaveAndAbsences.baseURL + '/js/angular/src/leave-absences';\n\n  require.config({\n    urlArgs: 'bust=' + (new Date()).getTime(),\n    paths: {\n      'leave-absences/shared': srcPath + '/shared',\n      'leave-absences/manager-notification-badge': srcPath + '/manager-notification-badge'\n    }\n  });\n\n  require(['leave-absences/shared/config'], function () {\n    require([\n      'leave-absences/manager-notification-badge/app'\n    ],\n    function (angular) {\n      angular.bootstrap(\n        document.querySelector('[data-leave-absences-manager-notification-badge]'), ['manager-notification-badge']\n      );\n    });\n  });\n})(CRM, require);\n\n//# sourceURL=/manager-notification-badge.js"),define("manager-notification-badge",function(){});
//# sourceMappingURL=manager-notification-badge.js.map