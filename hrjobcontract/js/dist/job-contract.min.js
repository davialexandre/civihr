eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.config',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('job-contract.config', ['job-contract.constants']).config(config);\n\n  config.$inject = [\n    '$httpProvider', '$logProvider', '$resourceProvider', '$routeProvider',\n    'uibDatepickerConfig', 'uiSelectConfig', 'settings'\n  ];\n\n  function config ($httpProvider, $logProvider, $resourceProvider, $routeProvider,\n    datepickerConfig, uiSelectConfig, settings) {\n    $logProvider.debugEnabled(settings.debug);\n\n    $routeProvider\n      .resolveForAll({\n        format: ['DateFormat', function (DateFormat) {\n          return DateFormat.getDateFormat();\n        }]\n      })\n      .when('/', {\n        controller: 'ContractListController',\n        templateUrl: settings.pathApp + 'views/contractList.html',\n        resolve: {\n          contractList: ['contractService', function (contractService) {\n            return contractService.get();\n          }]\n        }\n      }\n      )\n      .otherwise({ redirectTo: '/' });\n\n    $resourceProvider.defaults.stripTrailingSlashes = false;\n    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    uiSelectConfig.theme = 'bootstrap';\n    datepickerConfig.showWeeks = false;\n  }\n});\n\n//# sourceURL=/job-contract/modules/job-contract.config.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.constants',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('job-contract.constants', []).constant('settings', {\n    classNamePrefix: 'hrjc-',\n    contactId: CRM.jobContractTabApp.contactId,\n    debug: +CRM.debug,\n    pathApp: CRM.jobContractTabApp.path,\n    pathFile: CRM.url('civicrm/hrjobcontract/file/'),\n    pathReport: CRM.url('civicrm/report/hrjobcontract/summary'),\n    pathRest: CRM.url('civicrm/ajax/rest'),\n    pathTpl: CRM.jobContractTabApp.path + 'views/',\n    CRM: {\n      options: CRM.FieldOptions || {},\n      defaultCurrency: CRM.jobContractTabApp.defaultCurrency,\n      apiTsFmt: 'YYYY-MM-DD HH:mm:ss',\n      fields: CRM.jobContractTabApp.fields,\n      maxFileSize: CRM.jobContractTabApp.maxFileSize\n    }\n  });\n});\n\n//# sourceURL=/job-contract/modules/job-contract.constants.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/contract.controller',[\n  'common/lodash',\n  'common/moment'\n], function (_, moment) {\n  'use strict';\n\n  ContractController.__name = 'ContractController';\n  ContractController.$inject = [\n    '$filter', '$log', '$q', '$rootElement', '$route', '$scope', '$window', '$uibModal',\n    'settings', 'apiService', 'contractService', 'contractDetailsService', 'contractHourService',\n    'contractPayService', 'contractLeaveService', 'contractHealthService',\n    'contractPensionService', 'contractFilesService', 'contactService',\n    'contractRevisionListService', 'utilsService'\n  ];\n\n  function ContractController ($filter, $log, $q, $rootElement, $route, $scope, $window, $modal,\n    settings, API, contractService, contractDetailsService, contractHourService,\n    contractPayService, contractLeaveService, contractHealthService,\n    contractPensionService, contractFilesService, contactService,\n    contractRevisionListService, utilsService) {\n    $log.debug('Controller: ContractController');\n\n    var promiseFiles;\n    var contractId = $scope.contract.id;\n    var vm = this;\n\n    $scope.contractLoaded = false;\n    $scope.revisionsShown = false;\n    $scope.isCollapsed = true;\n    $scope.files = {};\n    $scope.revisionCurrent = {};\n    $scope.revisionList = [];\n    $scope.revisionDataList = [];\n\n    $scope.modalContract = modalContract;\n    $scope.modalRevision = modalRevision;\n    $scope.showRevisions = showRevisions;\n    vm.fetchRevisionDetails = fetchRevisionDetails;\n\n    (function init () {\n      initListeners();\n\n      _.extend($scope, _.cloneDeep($scope.model));\n\n      contractService\n        .fullDetails(contractId)\n        .then(function (results) {\n          updateContractView(results);\n\n          $scope.contractLoaded = true;\n\n          $scope.$watch('contract.is_primary', function () {\n            $scope.isCollapsed = !+$scope.contract.is_primary;\n          });\n\n          $scope.$broadcast('hrjc-loader-show');\n          // Fetching revision list form contractRevisionListService service\n          contractRevisionListService.fetchRevisions(contractId).then(function (result) {\n            $scope.revisionList = result.revisionList;\n            $scope.revisionDataList = result.revisionDataList;\n            $scope.$broadcast('hrjc-loader-hide');\n          });\n        })\n        .then(updateContractFiles);\n    }());\n\n    /**\n     * Fetches the Revision Details for given revision\n     * @param  {object} revision\n     * @return {object}\n     */\n    function fetchRevisionDetails (revision) {\n      var entity, revisionDetails;\n\n      return $q.all([\n        contractDetailsService.getOne({\n          jobcontract_revision_id: revision.details_revision_id\n        }),\n        contractHourService.getOne({\n          jobcontract_revision_id: revision.hour_revision_id\n        }),\n        contractHealthService.getOne({\n          jobcontract_revision_id: revision.health_revision_id\n        }),\n        contractPayService.getOne({\n          jobcontract_revision_id: revision.pay_revision_id\n        }),\n        contractPensionService.getOne({\n          jobcontract_revision_id: revision.pension_revision_id\n        }),\n        contractLeaveService.getOne({\n          jobcontract_revision_id: revision.leave_revision_id\n        })\n      ])\n      .then(function (results) {\n        revisionDetails = {\n          'details': results[0],\n          'hour': results[1],\n          'health': results[2],\n          'pay': results[3],\n          'pension': results[4],\n          'leave': results[5]\n        };\n        entity = { contract: $scope.contract };\n        _.extend(entity, _.cloneDeep($scope.model));\n        _.extend(entity.details, revisionDetails.details);\n        _.extend(entity.hour, revisionDetails.hour);\n        _.extend(entity.health, revisionDetails.health);\n        _.extend(entity.pay, revisionDetails.pay);\n        _.extend(entity.pension, revisionDetails.pension);\n        mapAbsenceTypesWithContractLeaveData(entity.leave, revisionDetails.leave);\n\n        return entity;\n      });\n    }\n\n    function initListeners () {\n      $scope.$on('updateContractView', function () {\n        $scope.$broadcast('hrjc-loader-show');\n\n        contractService\n          .fullDetails($scope.revisionCurrent.jobcontract_id)\n          .then(function (results) {\n            updateContractView(results);\n            $scope.$broadcast('hrjc-loader-hide');\n          })\n          .then(updateContractFiles);\n      });\n    }\n\n    /**\n     * Maps Absence Types with the leave data from the Contract\n     * or sets default revision data if Contract leave data does not exists yet, if presented\n     *\n     * @param {Array} leaveEntity\n     * @param {Array} leaveData\n     * @param {Object} contractRevisionIdObj optional\n     */\n    function mapAbsenceTypesWithContractLeaveData (leaveEntity, leaveData, contractRevisionIdObj) {\n      contractRevisionIdObj = contractRevisionIdObj || '';\n\n      _.each(leaveEntity, function (entity) {\n        _.extend(entity, leaveData\n          ? _.find(leaveData, { leave_type: entity.leave_type }) ||\n          contractRevisionIdObj : contractRevisionIdObj);\n      });\n    }\n\n    function modalContract (action, revisionEntityIdObj) {\n      var modalInstance, dateEffectiveRevisionCreated, dateEffectiveRevisionCurrent,\n        dateToday, revisionData, isCurrentRevision, i, objExt;\n      var revisionListEntitiesView = ['details', 'hour', 'pay'];\n      var options = {\n        controller: 'ModalContractController',\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalForm.html?v=4448',\n        windowClass: 'modal-contract',\n        size: 'lg',\n        resolve: {\n          action: function () {\n            return action || 'view';\n          },\n          content: function () {\n            return {};\n          },\n          entity: function () {\n            if (!revisionEntityIdObj) {\n              return {\n                contract: $scope.contract,\n                details: $scope.details,\n                hour: $scope.hour,\n                pay: $scope.pay,\n                leave: $scope.leave,\n                health: $scope.health,\n                pension: $scope.pension\n              };\n            }\n\n            return vm.fetchRevisionDetails(revisionEntityIdObj);\n          },\n          files: function () {\n            if (!revisionEntityIdObj) {\n              return promiseFiles;\n            }\n\n            return $q.all({\n              details: contractFilesService.get(revisionEntityIdObj.details_revision_id, 'civicrm_hrjobcontract_details'),\n              pension: contractFilesService.get(revisionEntityIdObj.pension_revision_id, 'civicrm_hrjobcontract_pension')\n            });\n          },\n          utils: function () {\n            return $scope.utils;\n          }\n        }\n      };\n\n      $scope.$broadcast('hrjc-loader-show');\n\n      switch (action) {\n        case 'edit':\n          options.resolve.content = function () {\n            return {\n              allowSave: true,\n              isDisabled: false,\n              copy: {\n                close: 'Cancel',\n                save: 'Save without making a new revision',\n                title: 'Edit contract'\n              }\n            };\n          };\n          break;\n        case 'change':\n          options.resolve.content = function () {\n            return {\n              allowSave: true,\n              isDisabled: false,\n              copy: {\n                close: 'Cancel',\n                save: 'Save and make a new revision',\n                title: 'Change contract terms'\n              }\n            };\n          };\n          break;\n      }\n\n      modalInstance = $modal.open(options);\n\n      modalInstance.result.then(function (results) {\n        if (!results) {\n          return;\n        }\n\n        contractService.updateHeaderInfo();\n        updateContractView(results);\n        updateContractList(results.details.period_end_date);\n\n        if (results.revisionCreated) {\n          dateEffectiveRevisionCreated = moment(new Date(results.revisionCreated.effective_date));\n          dateEffectiveRevisionCurrent = moment(new Date($scope.revisionCurrent.effective_date));\n          dateToday = moment();\n          revisionData = {\n            revisionEntityIdObj: results.revisionCreated,\n            details: results.details,\n            hour: results.hour,\n            pay: results.pay\n          };\n          isCurrentRevision = dateEffectiveRevisionCurrent.diff(dateToday, 'day') <= 0 || dateEffectiveRevisionCurrent.diff(dateEffectiveRevisionCreated, 'day') <= 0;\n\n          if (results.files) {\n            if (isCurrentRevision) {\n              updateContractFiles().then(function (files) {\n                revisionData.files = files;\n              });\n            } else {\n              $q.all({\n                details: contractFilesService.get(results.revisionCreated.details_revision_id, 'civicrm_hrjobcontract_details')\n              }).then(function (files) {\n                revisionData.files = files;\n              });\n            }\n          }\n\n          $scope.revisionList.unshift(results.revisionCreated);\n          $scope.revisionDataList.unshift(revisionData);\n        } else {\n          if ($scope.contract.is_primary !== results.contract.is_primary) {\n            $scope.$parent.$parent.toggleIsPrimary($scope.contract.id);\n          }\n\n          _.each($scope.revisionDataList, function (revisionData) {\n            i = 0;\n            objExt = {};\n            while (revisionListEntitiesView[i]) {\n              if (revisionData.revisionEntityIdObj[revisionListEntitiesView[i] + '_revision_id'] ===\n                $scope.revisionCurrent[revisionListEntitiesView[i] + '_revision_id']) {\n                objExt[revisionListEntitiesView[i]] = results[revisionListEntitiesView[i]];\n\n                if (revisionListEntitiesView[i] === 'details' && results.files) {\n                  updateContractFiles().then(function (files) {\n                    objExt.files = files;\n                    _.extend(revisionData, objExt);\n                  });\n                }\n\n                _.extend(revisionData, objExt);\n              }\n              i++;\n            }\n          });\n        }\n\n        CRM.refreshParent('#hrjobroles');\n        $window.location.assign(utilsService.getManageEntitlementsPageURL($scope.contract.contact_id));\n      });\n    }\n\n    function modalRevision (entity) {\n      var options;\n      var promiseEntityRevisionDataList = [];\n      var apiMethod = entity !== 'leave' ? 'getOne' : 'get';\n      var i = 0;\n      var len = $scope.revisionList.length;\n\n      $scope.$broadcast('hrjc-loader-show');\n      if (!entity) {\n        return null;\n      }\n\n      for (i; i < len; i++) {\n        promiseEntityRevisionDataList.push(API[apiMethod]('HRJob' + $filter('capitalize')(entity), {\n          jobcontract_revision_id: $scope.revisionList[i][entity + '_revision_id']\n        }));\n      }\n\n      options = {\n        appendTo: $rootElement.find('div').eq(0),\n        size: 'lg',\n        controller: 'ModalRevisionController',\n        templateUrl: settings.pathApp + 'views/modalRevision.html?v=1234',\n        windowClass: 'modal-revision',\n        resolve: {\n          entity: function () {\n            return entity;\n          },\n          fields: function () {\n            return $scope.$parent.$parent.fields[entity];\n          },\n          model: function () {\n            return $scope.model[entity];\n          },\n          utils: function () {\n            return $scope.utils;\n          },\n          revisionDataList: function () {\n            return $q.all(promiseEntityRevisionDataList);\n          },\n          revisionList: function () {\n            return $scope.revisionList;\n          },\n          modalContract: function () {\n            return $scope.modalContract;\n          }\n        }\n      };\n      return $modal.open(options);\n    }\n\n    /**\n     * Marks that the revisions (in a different tab) have been shown\n     */\n    function showRevisions () {\n      $scope.revisionsShown = true;\n    }\n\n    function updateContractView (newScope) {\n      var contractRevisionIdObj = {\n        id: null,\n        jobcontract_id: contractId,\n        jobcontract_revision_id: newScope.details.jobcontract_revision_id\n      };\n\n      _.extend($scope.details, newScope.details);\n      _.extend($scope.hour, newScope.hour || contractRevisionIdObj);\n      _.extend($scope.pay, newScope.pay || contractRevisionIdObj);\n\n      if (newScope.health &&\n        newScope.health.provider &&\n        newScope.health.provider !== $scope.health.provider) {\n        contactService.getOne(newScope.health.provider).then(function (contact) {\n          $scope.health.provider_contact = contact;\n        });\n      }\n\n      if (newScope.health &&\n        newScope.health.provider_life_insurance &&\n        newScope.health.provider_life_insurance !== $scope.health.provider_life_insurance) {\n        contactService.getOne(newScope.health.provider_life_insurance).then(function (contact) {\n          $scope.health.provider_life_insurance_contact = contact;\n        });\n      }\n\n      _.extend($scope.health, newScope.health || contractRevisionIdObj);\n      _.extend($scope.pension, newScope.pension || contractRevisionIdObj);\n      mapAbsenceTypesWithContractLeaveData($scope.leave, newScope.leave, contractRevisionIdObj);\n    }\n\n    /**\n     * Updates the contract list view,\n     * by sorting the contract into current or past\n     * depending on the period end date of the contract.\n     *\n     * @param {string || date} newEndDate the date specified by the user\n     */\n    function updateContractList (newEndDate) {\n      var isCurrentContract = !newEndDate ? true : (moment().diff(newEndDate, 'day') <= 0);\n      var contract = $scope.$parent.contract;\n      var currentContracts = $scope.$parent.contractCurrent;\n      var pastContracts = $scope.$parent.contractPast;\n      var currentContractIndex = currentContracts.indexOf(contract);\n      var pastContractIndex = pastContracts.indexOf(contract);\n\n      if (isCurrentContract) {\n        contract.is_current = '1';\n        if (currentContractIndex + 1) {\n          _.extend(currentContracts[currentContractIndex], contract);\n        } else {\n          pastContracts.splice(pastContractIndex);\n          currentContracts.push(contract);\n        }\n      } else {\n        contract.is_current = '0';\n        if (pastContractIndex + 1) {\n          _.extend(pastContracts[pastContractIndex], contract);\n        } else {\n          pastContracts.push(contract);\n          currentContracts.splice(currentContractIndex);\n        }\n      }\n    }\n\n    function updateContractFiles () {\n      promiseFiles = $q.all({\n        details: contractFilesService.get($scope.details.jobcontract_revision_id, 'civicrm_hrjobcontract_details'),\n        pension: contractFilesService.get($scope.pension.jobcontract_revision_id, 'civicrm_hrjobcontract_pension')\n      });\n\n      promiseFiles.then(function (files) {\n        $scope.files = files;\n      });\n\n      return promiseFiles;\n    }\n  }\n\n  return ContractController;\n});\n\n//# sourceURL=/job-contract/controllers/contract.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/contract-list.controller',[\n  'common/angular',\n  'common/lodash'\n], function (angular, _) {\n  'use strict';\n\n  ContractListController.__name = 'ContractListController';\n  ContractListController.$inject = [\n    '$filter', '$log', '$q', '$rootElement', '$rootScope', '$sce', '$scope', '$window',\n    '$uibModal', 'contractList', 'contractService', 'contractDetailsService',\n    'contractHourService', 'contractPayService', 'contractLeaveService', 'contractHealthService',\n    'contractPensionService', 'utilsService', 'settings', 'pubSub'\n  ];\n\n  function ContractListController ($filter, $log, $q, $rootElement, $rootScope,\n    $sce, $scope, $window, $modal, contractList, contractService, contractDetailsService,\n    contractHourService, contractPayService, contractLeaveService, contractHealthService,\n    contractPensionService, utilsService, settings, pubSub) {\n    $log.debug('Controller: ContractListController');\n\n    var entityName;\n    var promiseFields = {};\n    var promiseModel = {};\n    var entityServices = {\n      details: contractDetailsService,\n      hour: contractHourService,\n      pay: contractPayService,\n      leave: contractLeaveService,\n      health: contractHealthService,\n      pension: contractPensionService\n    };\n    var promiseUtils = {\n      hoursLocation: utilsService.getHoursLocation(),\n      payScaleGrade: utilsService.getPayScaleGrade(),\n      absenceTypes: utilsService.getAbsenceTypes()\n    };\n\n    $scope.contractCurrent = [];\n    $scope.contractListLoaded = false;\n    $scope.contractPast = [];\n    $scope.tooltips = {\n      changeContractTerms: $sce.trustAsHtml('<div>' +\n        '<p class=\"text-left\"><strong>Change Contract Terms:</strong><br>' +\n        'When an employeees job or role changes, i.e. promotion, secondment or move,' +\n        'you can use this wizard to update the details of the contract and record a new' +\n        'revision of the contract. A contract history is kept so you can always see the' +\n        'previous version of the contract.</p>' +\n        '<p class=\"text-left\"><strong>Correct an error on the contract record:</strong><br>' +\n        'If you notice an issue or error with the job terms you can correct these without' +\n        'creating a new job history record. These changes are not stored as a new revision' +\n        'of the contract.</p>' +\n        '</div>')\n    };\n    $scope.utils = {\n      contractListLen: contractList.length\n    };\n\n    $scope.delete = deleteContract;\n    $scope.modalContract = modalContract;\n    $scope.toggleIsPrimary = toggleIsPrimary;\n\n    (function init () {\n      for (entityName in entityServices) {\n        promiseFields[entityName] = entityServices[entityName].getFields();\n      }\n\n      $q.all(promiseFields).then(function (fields) {\n        $scope.fields = fields;\n\n        $log.debug('FIELDS:');\n        $log.debug(fields);\n\n        for (entityName in entityServices) {\n          promiseModel[entityName] = entityServices[entityName].model(fields[entityName]);\n        }\n\n        return $q.all(promiseModel);\n      })\n      .then(function (model) {\n        $scope.model = model;\n\n        $log.debug('MODEL:');\n        $log.debug(model);\n\n        contractList = $filter('orderBy')(contractList, '-is_primary');\n\n        angular.forEach(contractList, function (contract) {\n          +contract.is_current ? $scope.contractCurrent.push(contract) : $scope.contractPast.push(contract);\n        });\n\n        $scope.$watchCollection('contractCurrent', function () {\n          $scope.utils.contractListLen = $scope.contractCurrent.length + $scope.contractPast.length;\n        });\n\n        $scope.$watchCollection('contractPast', function () {\n          $scope.utils.contractListLen = $scope.contractCurrent.length + $scope.contractPast.length;\n        });\n\n        $rootScope.$broadcast('hrjc-loader-hide');\n        $scope.contractListLoaded = true;\n      });\n\n      $q.all(promiseUtils).then(function (utils) {\n        angular.extend($scope.utils, utils);\n      });\n    }());\n\n    function deleteContract (contractId) {\n      function removeContractById (contractArray, id) {\n        var i = 0;\n        var len = contractArray.length;\n\n        for (i; i < len; i++) {\n          if (+contractArray[i].id === +id) {\n            $scope.$emit('hrjc-loader-hide');\n            contractArray.splice(i, 1);\n            return id;\n          }\n        }\n\n        return null;\n      }\n\n      var modalInstance = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalDialog.html',\n        size: 'sm',\n        controller: 'ModalDialogController',\n        resolve: {\n          content: function () {\n            return {\n              msg: 'Are you sure you want to delete this job contract?'\n            };\n          }\n        }\n      });\n\n      modalInstance.result.then(function (confirm) {\n        if (confirm) {\n          $scope.$emit('hrjc-loader-show');\n          contractService.delete(contractId).then(function (result) {\n            if (!result.is_error) {\n              contractService.updateHeaderInfo();\n              removeContractById($scope.contractCurrent, contractId) || removeContractById($scope.contractPast, contractId);\n              pubSub.publish('Contract::deleted', {\n                contactId: settings.contactId,\n                contractId: contractId\n              });\n            }\n          });\n        }\n      });\n    }\n\n    function modalContract (action) {\n      if (!action || action !== 'new') {\n        return null;\n      }\n\n      var modalInstance;\n      var options = {\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalForm.html?v=2222',\n        size: 'lg',\n        controller: 'ModalContractNewController',\n        windowClass: 'modal-contract',\n        resolve: {\n          model: function () {\n            return $scope.model;\n          },\n          utils: function () {\n            return $q.all(angular.extend(promiseUtils, {\n              contractListLen: $scope.utils.contractListLen\n            }));\n          }\n        }\n      };\n\n      modalInstance = $modal.open(options);\n\n      modalInstance.result.then(function (contract) {\n        contractService.updateHeaderInfo();\n        +contract.is_current ? $scope.contractCurrent.push(contract) : $scope.contractPast.push(contract);\n\n        if (+contract.is_primary) {\n          $scope.toggleIsPrimary(contract.id);\n        }\n\n        $window.location.assign(utilsService.getManageEntitlementsPageURL(contract.contact_id));\n      });\n    }\n\n    function toggleIsPrimary (contractId) {\n      function unsetIsPrimary (contractArray) {\n        var i = 0;\n        var len = contractArray.length;\n\n        for (i; i < len; i++) {\n          if (+contractArray[i].id !== +contractId && +contractArray[i].is_primary) {\n            contractArray[i].is_primary = '0';\n\n            return contractArray[i].id;\n          }\n        }\n\n        return null;\n      }\n\n      unsetIsPrimary($scope.contractCurrent) || unsetIsPrimary($scope.contractPast);\n\n      ($filter('getObjById')($scope.contractCurrent, contractId) || $filter('getObjById')($scope.contractPast, contractId) || {}).is_primary = '1';\n\n      $scope.contractCurrent = $filter('orderBy')($scope.contractCurrent, '-is_primary');\n      $scope.contractPast = $filter('orderBy')($scope.contractPast, '-is_primary');\n    }\n  }\n\n  return ContractListController;\n});\n\n//# sourceURL=/job-contract/controllers/contract-list.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/revision-list.controller',[\n  'common/angular',\n  'common/lodash'\n], function (angular, _) {\n  'use strict';\n\n  RevisionListController.__name = 'RevisionListController';\n  RevisionListController.$inject = [\n    '$filter', '$log', '$q', '$rootElement', '$rootScope', '$scope', '$uibModal',\n    'settings', 'contractService', 'contractDetailsService', 'contractHourService',\n    'contractPayService', 'contractFilesService', 'contractRevisionService',\n    'contractRevisionListService'\n  ];\n\n  function RevisionListController ($filter, $log, $q, $rootElement, $rootScope,\n    $scope, $modal, settings, contractService, contractDetailsService,\n    contractHourService, contractPayService, contractFilesService, contractRevisionService,\n    contractRevisionListService) {\n    $log.debug('Controller: RevisionListController');\n\n    var contractId = $scope.contract.id;\n    var revisionDataListLocal = $scope.revisionDataList;\n\n    $scope.changeReasons = $rootScope.options.contract.change_reason;\n    $scope.currentPage = 1;\n    $scope.itemsPerPage = 5;\n    $scope.maxSize = 5;\n    $scope.sortCol = 'revisionEntityIdObj.effective_date';\n    $scope.sortReverse = true;\n    $scope.urlCSV = urlCSVBuild();\n    $scope.display = {\n      effectiveDate: true,\n      position: true,\n      payScale: true,\n      totalSalary: true,\n      hours: true,\n      placeOfWork: true,\n      recordedBy: true,\n      changeReason: true\n    };\n\n    $scope.createPage = createPage;\n    $scope.deleteRevision = deleteRevision;\n    $scope.modalRevisionEdit = modalRevisionEdit;\n    $scope.sortBy = sortBy;\n\n    (function init () {\n      initWatchers();\n\n      if (!$scope.revisionDataList) {\n        $scope.$broadcast('hrjc-loader-show');\n\n        // Fetching revision list form contractRevisionListService service\n        contractRevisionListService.fetchRevisions(contractId).then(function (result) {\n          $scope.revisionList = result.revisionList;\n          $scope.revisionDataList = result.revisionDataList;\n          $scope.$broadcast('hrjc-loader-hide');\n        });\n      }\n    }());\n\n    function createPage () {\n      var start = (($scope.currentPage - 1) * $scope.itemsPerPage);\n      var end = start + $scope.itemsPerPage;\n\n      $scope.revisionDataListPage = revisionDataListLocal.slice(start, end);\n    }\n\n    function deleteRevision (revisionId, e) {\n      if ($scope.revisionList.length === 1) {\n        e.stopPropagation();\n        return;\n      }\n\n      if (!revisionId || typeof +revisionId !== 'number') {\n        return;\n      }\n\n      var modalInstance = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalDialog.html',\n        size: 'sm',\n        controller: 'ModalDialogController',\n        resolve: {\n          content: function () {\n            return {\n              msg: 'Are you sure you want to delete this job contract revision?'\n            };\n          }\n        }\n      });\n\n      modalInstance.result.then(function (confirm) {\n        if (confirm) {\n          $scope.$broadcast('hrjc-loader-show');\n          contractService.deleteRevision(revisionId).then(function (results) {\n            var i = 0;\n            var len = $scope.revisionList.length;\n\n            if (!results.is_error) {\n              for (i; i < len; i++) {\n                if ($scope.revisionList[i].id === revisionId) {\n                  $scope.revisionList.splice(i, 1);\n                  $scope.revisionDataList.splice(i, 1);\n                  break;\n                }\n              }\n\n              $scope.sortBy();\n              $scope.createPage();\n\n              if ($scope.revisionCurrent.id !== setCurrentRevision()) {\n                $scope.$emit('updateContractView');\n                return;\n              }\n\n              $scope.$broadcast('hrjc-loader-hide');\n            }\n          });\n        }\n      });\n    }\n\n    function initWatchers () {\n      $scope.$watch('currentPage', function () {\n        $scope.createPage();\n      });\n\n      $scope.$watch('revisionDataList.length', function (lengthNow, lengthPrev) {\n        revisionDataListLocal = $scope.revisionDataList;\n        if (lengthNow > lengthPrev) {\n          setCurrentRevision();\n        }\n        $scope.sortBy();\n        $scope.createPage();\n      });\n    }\n\n    function modalRevisionEdit (revisionEntityIdObj) {\n      var date = revisionEntityIdObj.effective_date;\n      var reasonId = revisionEntityIdObj.change_reason;\n      var modalChangeReason = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalChangeReason.html?v=' + (new Date()).getTime(),\n        controller: 'ModalChangeReasonController',\n        resolve: {\n          content: function () {\n            return {\n              copy: {\n                title: 'Edit revision data'\n              }\n            };\n          },\n          date: function () {\n            return date;\n          },\n          reasonId: function () {\n            return reasonId;\n          }\n        }\n      });\n\n      modalChangeReason.result.then(function (results) {\n        if (results.date !== date || results.reasonId !== reasonId) {\n          contractService.saveRevision({\n            id: revisionEntityIdObj.id,\n            change_reason: results.reasonId,\n            effective_date: results.date\n          }).then(function () {\n            revisionEntityIdObj.effective_date = results.date;\n            revisionEntityIdObj.change_reason = results.reasonId;\n\n            $scope.sortBy();\n            $scope.createPage();\n\n            if ($scope.revisionCurrent.id !== setCurrentRevision()) {\n              $scope.$emit('updateContractView');\n            }\n          });\n        }\n      });\n    }\n\n    function setCurrentRevision () {\n      var revisionCurrent;\n      var i = 0;\n\n      if ($scope.revisionList.length) {\n        var revisionList = $filter('orderBy')($scope.revisionList, ['effective_date', 'id']);\n\n        angular.forEach(revisionList, function (revision) {\n          if (new Date(revision.effective_date).setHours(0, 0, 0, 0) <= new Date().setHours(0, 0, 0, 0)) {\n            revisionCurrent = revision;\n          }\n        });\n\n        if (!revisionCurrent) {\n          do {\n            revisionCurrent = revisionList[i];\n            i++;\n          } while (revisionList[i] && revisionList[i - 1].effective_date === revisionList[i].effective_date);\n        }\n\n        angular.extend($scope.revisionCurrent, revisionCurrent);\n        return revisionCurrent.id;\n      }\n      return null;\n    }\n\n    function sortBy (sortCol, sortReverse) {\n      if (typeof sortCol !== 'undefined') {\n        if ($scope.sortCol === sortCol) {\n          $scope.sortReverse = !$scope.sortReverse;\n        } else {\n          $scope.sortCol = sortCol;\n        }\n      }\n\n      if (typeof sortReverse !== 'undefined') {\n        $scope.sortReverse = sortReverse;\n      }\n\n      revisionDataListLocal = $filter('orderBy')($scope.revisionDataList, $scope.sortCol, $scope.sortReverse);\n    }\n\n    function urlCSVBuild () {\n      var url = settings.pathReport + (settings.pathReport.indexOf('?') > -1 ? '&' : '?');\n      var fields = $scope.fields;\n\n      angular.forEach(fields, function (entityFields, entityName) {\n        url += 'fields[' + entityName + '_revision_id]=1&';\n        angular.forEach(entityFields, function (field) {\n          url += 'fields[' + entityName + '_' + field.name + ']=1&';\n        });\n      });\n\n      url += 'fields[sort_name]=1' +\n        '&fields[first_name]=1' +\n        '&fields[last_name]=1' +\n        '&fields[external_identifier]=1' +\n        '&fields[email]=1' +\n        '&fields[street_address]=1' +\n        '&fields[city]=1' +\n        '&fields[name]=1' +\n        '&fields[contract_contact_id]=1' +\n        '&fields[contract_contract_id]=1' +\n        '&fields[jobcontract_revision_id]=1' +\n        '&fields[change_reason]=1' +\n        '&fields[created_date]=1' +\n        '&fields[effective_date]=1' +\n        '&fields[modified_date]=1' +\n        '&order_bys[1][column]=id&order_bys[1][order]=ASC' +\n        '&order_bys[2][column]=civicrm_hrjobcontract_revision_revision_id&order_bys[2][order]=ASC' +\n        '&order_bys[3][column]=-&order_bys[3][order]=ASC' +\n        '&order_bys[4][column]=-&order_bys[4][order]=ASC' +\n        '&order_bys[5][column]=-&order_bys[5][order]=ASC' +\n        '&contract_id_op=eq&permission=access+CiviReport' +\n        '&row_count=' +\n        '&_qf_Summary_submit_csv=Preview+CSV' +\n        '&groups=' +\n        '&contract_id_value=' + contractId +\n        '&group_bys[civicrm_hrjobcontract_revision_revision_id]=1';\n\n      return url;\n    }\n  }\n\n  return RevisionListController;\n});\n\n//# sourceURL=/job-contract/controllers/revision-list.controller.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/form/form-general.controller',[\n  'common/moment'\n], function (moment) {\n  'use strict';\n\n  FormGeneralController.__name = 'FormGeneralController';\n  FormGeneralController.$inject = ['$log', '$scope', 'HR_settings'];\n\n  function FormGeneralController ($log, $scope, hrSettings) {\n    $log.debug('Controller: FormGeneralController');\n\n    var entityDetails = $scope.entity.details;\n\n    $scope.format = hrSettings.DATE_FORMAT;\n    $scope.datepickerOptions = initDatepickerOptions();\n\n    $scope.dpOpen = dbOpen;\n\n    (function init () {\n      initWatchers();\n    }());\n\n    function dbOpen ($event, opened) {\n      $event.preventDefault();\n      $event.stopPropagation();\n\n      $scope[opened] = true;\n    }\n\n    /**\n     * Calculates the duration of the period between the given start and end\n     * dates, in years, months and days. Calculation includes both start and\n     * end dates in duration.\n     *\n     * Special handling for month and year diffs is used by moment.js,\n     * optimized to ensure that duration from 1st day of month to last day of\n     * month is calculated as \"1 month\".  This implies that duration between\n     * nth day of a month and (n-1)th day of next month is exactly \"1 month\"\n     * (eg. 2017-01-15 => 2017-02-14 = \"1 month\").  The analogue is expected\n     * of years calculation (ie. duration between nth day of a month and\n     * (n-1)th day of that same month in next year is calculated as \"1 year\",\n     * even on leap years).\n     *\n     * @param  {Date} dateStart\n     * @param  {Date} dateEnd\n     *\n     * @return {string}\n     *   Duration in years, months and days\n     */\n    function duration (dateStart, dateEnd) {\n      if (!dateStart || !dateEnd) {\n        return null;\n      }\n\n      var days, months, m, years;\n\n      m = moment(dateEnd);\n      m.add(1, 'days');\n      years = m.diff(dateStart, 'years');\n\n      m.add(-years, 'years');\n      months = m.diff(dateStart, 'months');\n\n      m.add(-months, 'months');\n      days = m.diff(dateStart, 'days');\n\n      years = years > 0 ? (years > 1 ? years + ' years ' : years + ' year ') : '';\n      months = months > 0 ? (months > 1 ? months + ' months ' : months + ' month ') : '';\n      days = days > 0 ? (days > 1 ? days + ' days' : days + ' day') : '';\n\n      return (years + months + days) || '0 days';\n    }\n\n    /**\n     * Return the max or min date allowed based on the given date\n     * (basically adds a day for `min`, subtracts it for `max`)\n     *\n     * @param  {Date} date\n     * @param  {string} type either 'max' or 'min'\n     * @return {[Date]}\n     */\n    function getLimitDate (date, type) {\n      type = type || 'min';\n\n      return moment(date)[(type === 'max' ? 'subtract' : 'add')](1, 'day').toDate();\n    }\n\n    /**\n     * Initializes the datepicker options\n     *\n     * @return {Object}\n     */\n    function initDatepickerOptions () {\n      return {\n        start: {\n          maxDate: entityDetails.period_end_date ? getLimitDate(entityDetails.period_end_date, 'max') : null\n        },\n        end: {\n          minDate: entityDetails.period_start_date ? getLimitDate(entityDetails.period_start_date, 'min') : null\n        }\n      };\n    }\n\n    function initWatchers () {\n      $scope.$watch('entity.details.period_start_date', function () {\n        $scope.datepickerOptions.end.minDate = getLimitDate(entityDetails.period_start_date, 'min');\n        $scope.duration = duration(entityDetails.period_start_date, entityDetails.period_end_date);\n      });\n\n      $scope.$watch('entity.details.period_end_date', function () {\n        if (entityDetails.period_end_date) {\n          $scope.datepickerOptions.start.maxDate = getLimitDate(entityDetails.period_end_date, 'max');\n        } else {\n          $scope.datepickerOptions.start.maxDate = null;\n          entityDetails.end_reason = null;\n        }\n\n        $scope.duration = duration(entityDetails.period_start_date, entityDetails.period_end_date);\n      });\n\n      $scope.$watch('entity.details.position', function (newVal, oldVal) {\n        if (newVal !== oldVal && entityDetails.title === oldVal) {\n          $scope.contractForm.detailsTitle.$setViewValue(newVal);\n          $scope.contractForm.detailsTitle.$render();\n        }\n      });\n\n      $scope.$watch('entity.details.notice_amount', function (newVal, oldVal) {\n        if (+newVal && !entityDetails.notice_unit) {\n          $scope.contractForm.detailsNoticeUnit.$setValidity('required', false);\n          $scope.contractForm.detailsNoticeUnit.$dirty = true;\n        }\n\n        if (newVal !== oldVal && entityDetails.notice_amount_employee === oldVal) {\n          entityDetails.notice_amount_employee = newVal;\n        }\n      });\n\n      $scope.$watch('entity.details.notice_amount_employee', function (newVal) {\n        if (+newVal && !entityDetails.notice_unit_employee) {\n          $scope.contractForm.detailsNoticeUnitEmployee.$setValidity('required', false);\n          $scope.contractForm.detailsNoticeUnitEmployee.$dirty = true;\n        }\n      });\n\n      $scope.$watch('entity.details.notice_unit', function (newVal, oldVal) {\n        if (newVal !== oldVal && entityDetails.notice_unit_employee === oldVal) {\n          entityDetails.notice_unit_employee = newVal;\n        }\n      });\n    }\n  }\n\n  return FormGeneralController;\n});\n\n//# sourceURL=/job-contract/controllers/form/form-general.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/form/form-health.controller',[],function () {\n  'use strict';\n\n  FormHealthController.__name = 'FormHealthController';\n  FormHealthController.$inject = ['$log', '$scope', 'contactService'];\n\n  function FormHealthController ($log, $scope, contactService) {\n    $log.debug('Controller: FormHealthController');\n\n    $scope.contacts = {\n      Health_Insurance_Provider: [],\n      Life_Insurance_Provider: []\n    };\n\n    $scope.refreshContacts = refreshContacts;\n\n    (function init () {\n      if ($scope.entity.health.provider) {\n        contactService.getOne($scope.entity.health.provider).then(function (result) {\n          $scope.contacts.Health_Insurance_Provider.push(result);\n        });\n      }\n\n      if ($scope.entity.health.provider_life_insurance) {\n        contactService.getOne($scope.entity.health.provider_life_insurance).then(function (result) {\n          $scope.contacts.Life_Insurance_Provider.push(result);\n        });\n      }\n    }());\n\n    function refreshContacts (input, contactSubType) {\n      if (!input) {\n        return;\n      }\n\n      contactService.search(input, {\n        contact_type: 'Organization',\n        contact_sub_type: contactSubType\n      }).then(function (results) {\n        $scope.contacts[contactSubType] = results;\n      });\n    }\n  }\n\n  return FormHealthController;\n});\n\n//# sourceURL=/job-contract/controllers/form/form-health.controller.js"),eval("/*\nfraction.js\nA Javascript fraction library.\n\nCopyright (c) 2009  Erik Garrison <erik@hypervolu.me>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n\n/* Fractions */\n/* \n *\n * Fraction objects are comprised of a numerator and a denomenator.  These\n * values can be accessed at fraction.numerator and fraction.denomenator.\n *\n * Fractions are always returned and stored in lowest-form normalized format.\n * This is accomplished via Fraction.normalize.\n *\n * The following mathematical operations on fractions are supported:\n *\n * Fraction.equals\n * Fraction.add\n * Fraction.subtract\n * Fraction.multiply\n * Fraction.divide\n *\n * These operations accept both numbers and fraction objects.  (Best results\n * are guaranteed when the input is a fraction object.)  They all return a new\n * Fraction object.\n *\n * Usage:\n *\n * TODO\n *\n */\n\n/*\n * The Fraction constructor takes one of:\n *   an explicit numerator (integer) and denominator (integer),\n *   a string representation of the fraction (string),\n *   or a floating-point number (float)\n *\n * These initialization methods are provided for convenience.  Because of\n * rounding issues the best results will be given when the fraction is\n * constructed from an explicit integer numerator and denomenator, and not a\n * decimal number.\n *\n *\n * e.g. new Fraction(1, 2) --> 1/2\n *      new Fraction('1/2') --> 1/2\n *      new Fraction('2 3/4') --> 11/4  (prints as 2 3/4)\n *\n */\ndefine('job-contract/vendor/fraction',[],function(){\n    var Fraction = function(numerator, denominator)\n    {\n        /* double argument invocation */\n        if (typeof numerator !== 'undefined' && denominator) {\n            if (typeof(numerator) === 'number' && typeof(denominator) === 'number') {\n                this.numerator = numerator;\n                this.denominator = denominator;\n            } else if (typeof(numerator) === 'string' && typeof(denominator) === 'string') {\n                // what are they?\n                // hmm....\n                // assume they are ints?\n                this.numerator = parseInt(numerator);\n                this.denominator = parseInt(denominator);\n            }\n        /* single-argument invocation */\n        } else if (typeof denominator === 'undefined') {\n            num = numerator; // swap variable names for legibility\n            if (typeof(num) === 'number') {  // just a straight number init\n                this.numerator = num;\n                this.denominator = 1;\n            } else if (typeof(num) === 'string') {\n                var a, b;  // hold the first and second part of the fraction, e.g. a = '1' and b = '2/3' in 1 2/3\n                           // or a = '2/3' and b = undefined if we are just passed a single-part number\n                var arr = num.split(' ')\n                if (arr[0]) a = arr[0]\n                if (arr[1]) b = arr[1]\n                /* compound fraction e.g. 'A B/C' */\n                //  if a is an integer ...\n                if (a % 1 === 0 && b && b.match('/')) {\n                    return (new Fraction(a)).add(new Fraction(b));\n                } else if (a && !b) {\n                    /* simple fraction e.g. 'A/B' */\n                    if (typeof(a) === 'string' && a.match('/')) {\n                        // it's not a whole number... it's actually a fraction without a whole part written\n                        var f = a.split('/');\n                        this.numerator = f[0]; this.denominator = f[1];\n                    /* string floating point */\n                    } else if (typeof(a) === 'string' && a.match('\\.')) {\n                        return new Fraction(parseFloat(a));\n                    /* whole number e.g. 'A' */\n                    } else { // just passed a whole number as a string\n                        this.numerator = parseInt(a);\n                        this.denominator = 1;\n                    }\n                } else {\n                    return undefined; // could not parse\n                }\n            }\n        }\n        this.normalize();\n    }\n\n\n    Fraction.prototype.clone = function()\n    {\n        return new Fraction(this.numerator, this.denominator);\n    }\n\n\n    /* pretty-printer, converts fractions into whole numbers and fractions */\n    Fraction.prototype.toString = function()\n    {\n        if (this.denominator==='NaN') return 'NaN'\n        var wholepart = (this.numerator/this.denominator>0) ?\n          Math.floor(this.numerator / this.denominator) :\n          Math.ceil(this.numerator / this.denominator)\n        var numerator = this.numerator % this.denominator\n        var denominator = this.denominator;\n        var result = [];\n        if (wholepart != 0)\n            result.push(wholepart);\n        if (numerator != 0)\n            result.push(((wholepart===0) ? numerator : Math.abs(numerator)) + '/' + denominator);\n        return result.length > 0 ? result.join(' ') : 0;\n    }\n\n\n    /* destructively rescale the fraction by some integral factor */\n    Fraction.prototype.rescale = function(factor)\n    {\n        this.numerator *= factor;\n        this.denominator *= factor;\n        return this;\n    }\n\n\n    Fraction.prototype.add = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction) {\n            b = b.clone();\n        } else {\n            b = new Fraction(b);\n        }\n        td = a.denominator;\n        a.rescale(b.denominator);\n        b.rescale(td);\n\n        a.numerator += b.numerator;\n\n        return a.normalize();\n    }\n\n\n    Fraction.prototype.subtract = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction) {\n            b = b.clone();  // we scale our argument destructively, so clone\n        } else {\n            b = new Fraction(b);\n        }\n        td = a.denominator;\n        a.rescale(b.denominator);\n        b.rescale(td);\n\n        a.numerator -= b.numerator;\n\n        return a.normalize();\n    }\n\n\n    Fraction.prototype.multiply = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction)\n        {\n            a.numerator *= b.numerator;\n            a.denominator *= b.denominator;\n        } else if (typeof b === 'number') {\n            a.numerator *= b;\n        } else {\n            return a.multiply(new Fraction(b));\n        }\n        return a.normalize();\n    }\n\n    Fraction.prototype.divide = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction)\n        {\n            a.numerator *= b.denominator;\n            a.denominator *= b.numerator;\n        } else if (typeof b === 'number') {\n            a.denominator *= b;\n        } else {\n            return a.divide(new Fraction(b));\n        }\n        return a.normalize();\n    }\n\n    Fraction.prototype.equals = function(b)\n    {\n        if (!(b instanceof Fraction)) {\n            b = new Fraction(b);\n        }\n        // fractions that are equal should have equal normalized forms\n        var a = this.clone().normalize();\n        var b = b.clone().normalize();\n        return (a.numerator === b.numerator && a.denominator === b.denominator);\n    }\n\n\n    /* Utility functions */\n\n    /* Destructively normalize the fraction to its smallest representation.\n     * e.g. 4/16 -> 1/4, 14/28 -> 1/2, etc.\n     * This is called after all math ops.\n     */\n    Fraction.prototype.normalize = (function()\n    {\n\n        var isFloat = function(n)\n        {\n            return (typeof(n) === 'number' &&\n                    ((n > 0 && n % 1 > 0 && n % 1 < 1) ||\n                     (n < 0 && n % -1 < 0 && n % -1 > -1))\n                   );\n        }\n\n        var roundToPlaces = function(n, places)\n        {\n            if (!places) {\n                return Math.round(n);\n            } else {\n                var scalar = Math.pow(10, places);\n                return Math.round(n*scalar)/scalar;\n            }\n        }\n\n        return (function() {\n\n            // XXX hackish.  Is there a better way to address this issue?\n            //\n            /* first check if we have decimals, and if we do eliminate them\n             * multiply by the 10 ^ number of decimal places in the number\n             * round the number to nine decimal places\n             * to avoid js floating point funnies\n             */\n            if (isFloat(this.denominator)) {\n                var rounded = roundToPlaces(this.denominator, 9);\n                var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);\n                this.denominator = Math.round(this.denominator * scaleup); // this !!! should be a whole number\n                //this.numerator *= scaleup;\n                this.numerator *= scaleup;\n            }\n            if (isFloat(this.numerator)) {\n                var rounded = roundToPlaces(this.numerator, 9);\n                var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);\n                this.numerator = Math.round(this.numerator * scaleup); // this !!! should be a whole number\n                //this.numerator *= scaleup;\n                this.denominator *= scaleup;\n            }\n            var gcf = Fraction.gcf(this.numerator, this.denominator);\n            this.numerator /= gcf;\n            this.denominator /= gcf;\n            if ((this.numerator < 0 && this.denominator < 0) || (this.numerator > 0 && this.denominator < 0)) {\n                this.numerator *= -1;\n                this.denominator *= -1;\n            }\n            return this;\n        });\n\n    })();\n\n\n    /* Takes two numbers and returns their greatest common factor.\n     */\n    Fraction.gcf = function(a, b)\n    {\n\n        var common_factors = [];\n        var fa = Fraction.primeFactors(a);\n        var fb = Fraction.primeFactors(b);\n        // for each factor in fa\n        // if it's also in fb\n        // put it into the common factors\n        fa.forEach(function (factor)\n        {\n            var i = fb.indexOf(factor);\n            if (i >= 0) {\n                common_factors.push(factor);\n                fb.splice(i,1); // remove from fb\n            }\n        });\n\n        if (common_factors.length === 0)\n            return 1;\n\n        var gcf = (function() {\n            var r = common_factors[0];\n            var i;\n            for (i=1;i<common_factors.length;i++)\n            {\n                r = r * common_factors[i];\n            }\n            return r;\n        })();\n\n        return gcf;\n\n    };\n\n\n    // Adapted from:\n    // http://www.btinternet.com/~se16/js/factor.htm\n    Fraction.primeFactors = function(n)\n    {\n\n        var num = Math.abs(n);\n        var factors = [];\n        var _factor = 2;  // first potential prime factor\n\n        while (_factor * _factor <= num)  // should we keep looking for factors?\n        {\n          if (num % _factor === 0)  // this is a factor\n            {\n                factors.push(_factor);  // so keep it\n                num = num/_factor;  // and divide our search point by it\n            }\n            else\n            {\n                _factor++;  // and increment\n            }\n        }\n\n        if (num != 1)                    // If there is anything left at the end...\n        {                                // ...this must be the last prime factor\n            factors.push(num);           //    so it too should be recorded\n        }\n\n        return factors;                  // Return the prime factors\n    }\n\n    return Fraction;\n});\n//# sourceURL=/job-contract/vendor/fraction.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/form/form-hour.controller',[\n  'job-contract/vendor/fraction'\n], function (Fraction) {\n  'use strict';\n\n  FormHourController.__name = 'FormHourController';\n  FormHourController.$inject = ['$log', '$filter', '$rootScope', '$scope'];\n\n  function FormHourController ($log, $filter, $rootScope, $scope) {\n    $log.debug('Controller: FormHourController');\n\n    var entityHour = $scope.entity.hour;\n    var utilsHoursLocation = $scope.utils.hoursLocation;\n    var locStandHrs = {};\n    var hourTypeMapping = {\n      0: 'CASUAL',\n      4: 'PART_TIME',\n      8: 'FULL_TIME'\n    };\n\n    $scope.hrsTypeDefined = false;\n    $scope.hrsAmountDefined = false;\n\n    (function init () {\n      entityHour.location_standard_hours = entityHour.location_standard_hours || '1';\n      locStandHrs = $filter('getObjById')(utilsHoursLocation, entityHour.location_standard_hours);\n\n      initWatchers();\n    }());\n\n    function initWatchers () {\n      $scope.$watch('entity.hour.location_standard_hours', function (locStandHrsId) {\n        locStandHrs = $filter('getObjById')(utilsHoursLocation, locStandHrsId);\n        updateHours(locStandHrs, entityHour.hours_type);\n        updateFTE(locStandHrs.standard_hours, entityHour.hours_amount);\n      });\n\n      $scope.$watch('entity.hour.hours_type', function (hrsTypeId, hrsTypeIdPrev) {\n        if (hrsTypeId !== hrsTypeIdPrev) {\n          updateHours(locStandHrs, hrsTypeId);\n          updateFTE(locStandHrs.standard_hours, entityHour.hours_amount);\n        }\n      });\n\n      $scope.$watch('entity.hour.hours_amount', function (hrsAmount, hrsAmountPrev) {\n        if (hrsAmount !== hrsAmountPrev) {\n          updateFTE(locStandHrs.standard_hours, hrsAmount);\n        }\n      });\n\n      $scope.$watch('entity.hour.hours_unit', function (hrsUnit, hrsUnitPrev) {\n        if (hrsUnit !== hrsUnitPrev) {\n          updateFTE(locStandHrs.standard_hours, entityHour.hours_amount);\n        }\n      });\n    }\n\n    function updateHours (locStandHrs, hrsTypeId) {\n      $scope.hrsTypeDefined = !!entityHour.hours_type;\n      $scope.hrsAmountDefined = !!entityHour.hours_amount;\n      entityHour.hours_unit = locStandHrs.periodicity;\n\n      // reset if hours are not defined or if new choice is \"full time\"\n      if ($scope.hrsTypeDefined && (!$scope.hrsAmountDefined || hourTypeMapping[+hrsTypeId] === 'FULL_TIME')) {\n        switch (hourTypeMapping[+hrsTypeId]) {\n          case 'FULL_TIME':\n            entityHour.hours_amount = locStandHrs.standard_hours;\n            break;\n          case 'PART_TIME':\n            entityHour.hours_amount = Math.round(locStandHrs.standard_hours / 2);\n            break;\n          case 'CASUAL':\n            entityHour.hours_amount = 0;\n            break;\n          default:\n            entityHour.hours_amount = '';\n        }\n      } else if (!$scope.hrsAmountDefined && !$scope.hrsAmountDefined) {\n        entityHour.hours_amount = '';\n        entityHour.hours_unit = '';\n      }\n    }\n\n    function updateFTE (hrsStandard, hrsAmount) {\n      hrsAmount = parseFloat(hrsAmount) || 0;\n      hrsStandard = parseFloat(hrsStandard) || 0;\n\n      var fteFraction = new Fraction(hrsAmount, hrsStandard);\n\n      entityHour.fte_num = String(+entityHour.hours_type ? fteFraction.numerator : 0);\n      entityHour.fte_denom = String(+entityHour.hours_type ? fteFraction.denominator : 0);\n      entityHour.hours_fte = String(parseFloat(((entityHour.fte_num / entityHour.fte_denom) || 0).toFixed(2)));\n\n      $scope.fteFraction = entityHour.fte_num + '/' + entityHour.fte_denom;\n    }\n  }\n\n  return FormHourController;\n});\n\n//# sourceURL=/job-contract/controllers/form/form-hour.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/form/form-leave.controller',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  FormLeaveController.__name = 'FormLeaveController';\n  FormLeaveController.$inject = ['$log', '$scope', 'utilsService'];\n\n  function FormLeaveController ($log, $scope, utilsService) {\n    $log.debug('Controller: FormLeaveController');\n\n    var vm = {};\n\n    vm.numberOfPublicHolidays = 0;\n\n    /**\n     * Initializes the controller by setting properties and adding watchers\n     */\n    (function init () {\n      loadNumberOfPublicHolidays();\n      initWatchers();\n    }());\n\n    /**\n     * Loads the number of Public Holidays in Current Period\n     */\n    function loadNumberOfPublicHolidays () {\n      utilsService.getNumberOfPublicHolidaysInCurrentPeriod()\n        .then(function (number) {\n          vm.numberOfPublicHolidays = number;\n        });\n    }\n\n    /**\n     * Attach listeners to $scope\n     */\n    function initWatchers () {\n      $scope.$watch('entity.leave', toggleAddPublicHolidayRadios, true);\n    }\n\n    /**\n     * This is a listener for when any of the leave types in the form changes.\n     *\n     * Only one leave type can have \"add_public_holidays\" selected. This function\n     * checks if we have a type where its value changed from false to true and, if so,\n     * set \"add_public_holidays\" to false for every other type.\n     *\n     * @param {Object} newValue - An object containing the new leave type values\n     * @param {Object} oldValue - An object containing the old leave type values\n     */\n    function toggleAddPublicHolidayRadios (newValue, oldValue) {\n      var newLeaveWithPublicHolidays = _.find(newValue, function (value, i) {\n        return value.add_public_holidays && !oldValue[i].add_public_holidays;\n      });\n\n      if (newLeaveWithPublicHolidays) {\n        newValue.forEach(function (value) {\n          if (value.leave_type !== newLeaveWithPublicHolidays.leave_type) {\n            value.add_public_holidays = false;\n          }\n        });\n      }\n    }\n\n    return vm;\n  }\n\n  return FormLeaveController;\n});\n\n//# sourceURL=/job-contract/controllers/form/form-leave.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/form/form-pay.controller',[],function () {\n  'use strict';\n\n  FormPayController.__name = 'FormPayController';\n  FormPayController.$inject = ['$filter', '$log', '$scope', 'settings'];\n\n  function FormPayController ($filter, $log, $scope, settings) {\n    $log.debug('Controller: FormPayController');\n\n    var entityPay = $scope.entity.pay || {};\n    var defaults = {\n      pay_amount: 0,\n      pay_currency: settings.CRM.defaultCurrency,\n      pay_cycle: '2',\n      pay_unit: 'Year'\n    };\n    var utilsPayScaleGrade = $scope.utils.payScaleGrade;\n    var workPerYear = {\n      Year: 1,\n      Month: 12,\n      Bimonthly: 24,\n      Week: 52,\n      Biweekly: 104,\n      Fortnight: 26,\n      Day: 260,\n      Hour: 2080\n    };\n\n    $scope.collapseBenDed = !entityPay.annual_benefits.length && !entityPay.annual_deductions.length;\n    $scope.benefits_per_cycle = (0).toFixed(2);\n    $scope.benefits_per_cycle_net = 0;\n    $scope.deductions_per_cycle = (0).toFixed(2);\n\n    $scope.add = add;\n    $scope.applyPayScaleGradeData = applyPayScaleGradeData;\n    $scope.calcAnnualPayEst = calcAnnualPayEst;\n    $scope.calcBenefitsPerCycle = calcBenefitsPerCycle;\n    $scope.calcBenefitsPerCycleNet = calcBenefitsPerCycleNet;\n    $scope.calcDeductionsPerCycle = calcDeductionsPerCycle;\n    $scope.calcPayPerCycleGross = calcPayPerCycleGross;\n    $scope.calcPayPerCycleNet = calcPayPerCycleNet;\n    $scope.remove = remove;\n    $scope.resetData = resetData;\n    $scope.setDefaults = setDefaults;\n\n    (function init () {\n      entityPay.is_paid = entityPay.is_paid || 0;\n      entityPay.pay_is_auto_est = '0';\n      entityPay.annual_benefits = entityPay.annual_benefits || [];\n      entityPay.annual_deductions = entityPay.annual_deductions || [];\n\n      initWatchers();\n    }());\n\n    function add (array) {\n      array.push({\n        'name': '',\n        'type': '',\n        'amount_pct': '',\n        'amount_abs': ''\n      });\n    }\n\n    function applyPayScaleGradeData () {\n      if (entityPay.pay_scale) {\n        var payScaleGrade = $filter('getObjById')(utilsPayScaleGrade, entityPay.pay_scale);\n        entityPay.pay_amount = payScaleGrade.amount || defaults.pay_amount;\n        entityPay.pay_currency = payScaleGrade.currency || defaults.pay_currency;\n        entityPay.pay_unit = payScaleGrade.pay_frequency || defaults.pay_unit;\n      }\n    }\n\n    function calcAnnualPayEst () {\n      if (+entityPay.is_paid) {\n        entityPay.pay_annualized_est = (entityPay.pay_amount * workPerYear[entityPay.pay_unit] || 0).toFixed(2);\n      }\n    }\n\n    function calcBenefitsPerCycle () {\n      if (+entityPay.is_paid) {\n        var i = 0;\n        var len = entityPay.annual_benefits.length;\n        var annualBenefits = 0;\n\n        for (i; i < len; i++) {\n          if (+entityPay.annual_benefits[i].type === 2) {\n            entityPay.annual_benefits[i].amount_abs = (entityPay.annual_benefits[i].amount_pct / 100 * entityPay.pay_annualized_est).toFixed(2);\n          }\n\n          annualBenefits += +entityPay.annual_benefits[i].amount_abs;\n        }\n        $scope.benefits_per_cycle = (annualBenefits / getCycles()).toFixed(2);\n      }\n    }\n\n    function calcBenefitsPerCycleNet () {\n      if (+entityPay.is_paid) {\n        $scope.benefits_per_cycle_net = $scope.benefits_per_cycle - $scope.deductions_per_cycle;\n      }\n    }\n\n    function calcDeductionsPerCycle () {\n      if (+entityPay.is_paid) {\n        var i = 0;\n        var len = entityPay.annual_deductions.length;\n        var annualDeductions = 0;\n\n        for (i; i < len; i++) {\n          if (+entityPay.annual_deductions[i].type === 2) {\n            entityPay.annual_deductions[i].amount_abs = (entityPay.annual_deductions[i].amount_pct / 100 * entityPay.pay_annualized_est).toFixed(2);\n          }\n\n          annualDeductions += +entityPay.annual_deductions[i].amount_abs;\n        }\n        $scope.deductions_per_cycle = (annualDeductions / getCycles()).toFixed(2);\n      }\n    }\n\n    function calcPayPerCycleGross () {\n      if (+entityPay.is_paid) {\n        entityPay.pay_per_cycle_gross = (entityPay.pay_annualized_est / getCycles()).toFixed(2);\n      }\n    }\n\n    function calcPayPerCycleNet () {\n      if (+entityPay.is_paid) {\n        entityPay.pay_per_cycle_net = (+entityPay.pay_per_cycle_gross + +$scope.benefits_per_cycle_net).toFixed(2);\n      }\n    }\n\n    function getCycles () {\n      var cycles = 1;\n\n      switch (+entityPay.pay_cycle) {\n        case 1:\n          cycles = workPerYear.Week;\n          break;\n        case 2:\n          cycles = workPerYear.Month;\n          break;\n        case 3:\n          cycles = workPerYear.Biweekly;\n          break;\n        case 4:\n          cycles = workPerYear.Bimonthly;\n          break;\n      }\n\n      return cycles;\n    }\n\n    function initWatchers () {\n      $scope.$watch('entity.pay.pay_amount', $scope.calcAnnualPayEst);\n      $scope.$watch('entity.pay.pay_unit', $scope.calcAnnualPayEst);\n      $scope.$watch('entity.pay.pay_annualized_est', function () {\n        $scope.calcPayPerCycleGross();\n        $scope.calcBenefitsPerCycle();\n        $scope.calcDeductionsPerCycle();\n      });\n      $scope.$watch('entity.pay.annual_benefits', $scope.calcBenefitsPerCycle, true);\n      $scope.$watch('entity.pay.annual_deductions', $scope.calcDeductionsPerCycle, true);\n      $scope.$watch('benefits_per_cycle', $scope.calcBenefitsPerCycleNet);\n      $scope.$watch('deductions_per_cycle', $scope.calcBenefitsPerCycleNet);\n      $scope.$watch('benefits_per_cycle_net', $scope.calcPayPerCycleNet);\n      $scope.$watch('entity.pay.pay_per_cycle_gross', $scope.calcPayPerCycleNet);\n    }\n\n    function remove (array, index) {\n      array.splice(index, 1);\n    }\n\n    function resetData () {\n      entityPay.pay_scale = '';\n      entityPay.pay_amount = '';\n      entityPay.pay_unit = '';\n      entityPay.pay_currency = '';\n      entityPay.pay_annualized_est = '';\n      entityPay.pay_is_auto_est = '';\n      entityPay.annual_benefits = [];\n      entityPay.annual_deductions = [];\n      entityPay.pay_cycle = '';\n      entityPay.pay_per_cycle_gross = '';\n      entityPay.pay_per_cycle_net = '';\n      $scope.benefits_per_cycle = '';\n      $scope.deductions_per_cycle = '';\n    }\n\n    function setDefaults () {\n      entityPay.pay_cycle = defaults.pay_cycle;\n      entityPay.pay_currency = defaults.pay_currency;\n      entityPay.pay_is_auto_est = '0';\n      entityPay.pay_amount = (0).toFixed(2);\n    }\n  }\n\n  return FormPayController;\n});\n\n//# sourceURL=/job-contract/controllers/form/form-pay.controller.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/form/form-pension.controller',[],function () {\n  'use strict';\n\n  FormPensionController.__name = 'FormPensionController';\n  FormPensionController.$inject = ['$log', '$scope', 'settings', 'contactService'];\n\n  function FormPensionController ($log, $scope, settings, contactService) {\n    $log.debug('Controller: FormPensionController');\n\n    $scope.contacts = {\n      Pension_Provider: []\n    };\n\n    $scope.refreshContacts = refreshContacts;\n\n    (function init () {\n      if ($scope.entity.pension.pension_type) {\n        contactService.getOne($scope.entity.pension.pension_type).then(function (provider) {\n          $scope.contacts.Pension_Provider.push(provider);\n        });\n      }\n    }());\n\n    function refreshContacts (input, contactSubType) {\n      if (!input) {\n        return;\n      }\n\n      contactService.search(input, {\n        contact_type: 'Organization',\n        contact_sub_type: contactSubType\n      }).then(function (contactSubTypes) {\n        $scope.contacts[contactSubType] = contactSubTypes;\n      });\n    }\n  }\n\n  return FormPensionController;\n});\n\n//# sourceURL=/job-contract/controllers/form/form-pension.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/modal/modal-change-reason.controller',[\n  'common/moment'\n], function (moment) {\n  'use strict';\n\n  ModalChangeReasonController.__name = 'ModalChangeReasonController';\n  ModalChangeReasonController.$inject = [\n    '$log', '$scope', '$uibModalInstance', 'content', 'date', 'reasonId',\n    'settings', 'contractRevisionService'\n  ];\n\n  function ModalChangeReasonController ($log, $scope, $modalInstance, content, date,\n    reasonId, settings, contractRevisionService) {\n    var copy;\n\n    $log.debug('Controller: ModalChangeReasonController');\n\n    content = content || {};\n    copy = content.copy || {};\n    copy.title = copy.title || 'Revision data';\n\n    $scope.change_reason = reasonId || '';\n    $scope.copy = copy;\n    $scope.effective_date = date || '';\n    $scope.isPast = false;\n\n    $scope.cancel = cancel;\n    $scope.dpOpen = dpOpen;\n    $scope.save = save;\n\n    (function init () {\n      initWatchers();\n    }());\n\n    function cancel () {\n      $modalInstance.dismiss('cancel');\n    }\n\n    function dpOpen ($event, opened) {\n      $event.preventDefault();\n      $event.stopPropagation();\n\n      $scope[opened] = true;\n    }\n\n    function initWatchers () {\n      $scope.$watch('effective_date', function (dateSelected) {\n        $scope.isPast = (new Date(dateSelected).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0));\n      });\n    }\n\n    function save () {\n      contractRevisionService.validateEffectiveDate({\n        contact_id: settings.contactId,\n        effective_date: $scope.effective_date\n      })\n      .then(function (result) {\n        if (result.success) {\n          $modalInstance.close({\n            reasonId: $scope.change_reason,\n            date: $scope.effective_date ? moment($scope.effective_date).format('YYYY-MM-DD') : ''\n          });\n        } else {\n          CRM.alert(result.message, 'Error', 'error');\n          $scope.$broadcast('hrjc-loader-hide');\n        }\n      });\n    }\n  }\n\n  return ModalChangeReasonController;\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-change-reason.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/modal/modal-contract-new.controller',[\n  'common/angular',\n  'common/lodash',\n  'common/moment'\n], function (angular, _, moment) {\n  'use strict';\n\n  ModalContractNewController.__name = 'ModalContractNewController';\n  ModalContractNewController.$inject = [\n    '$log', '$q', '$rootElement', '$rootScope', '$sce', '$scope', '$uibModalInstance',\n    '$uibModal', 'Contract', 'contractService', 'contractDetailsService',\n    'contractHourService', 'contractPayService', 'contractLeaveService',\n    'contractHealthService', 'contractPensionService', 'contractFilesService',\n    'model', 'utilsService', 'utils', 'settings', 'pubSub'\n  ];\n\n  function ModalContractNewController ($log, $q, $rootElement, $rootScope, $sce,\n    $scope, $modalInstance, $modal, Contract, contractService, contractDetailsService,\n    contractHourService, contractPayService, contractLeaveService, contractHealthService,\n    contractPensionService, contractFilesService, model, utilsService, utils,\n    settings, pubSub) {\n    $log.debug('Controller: ModalContractNewController');\n\n    $scope.allowSave = true;\n    $scope.action = 'new';\n    $scope.entity = {};\n    $scope.fileMaxSize = settings.CRM.maxFileSize || 0;\n    $scope.isDisabled = false;\n    $scope.showIsPrimary = utils.contractListLen;\n    $scope.utils = utils;\n    $scope.copy = {\n      close: 'Cancel',\n      save: 'Add New Job Contract',\n      title: 'Add New Job Contract'\n    };\n    $scope.entity.contract = {\n      is_primary: 0\n    };\n    $scope.tooltips = {\n      fileSize: $sce.trustAsHtml('<p>' +\n        'THE FILE IS TOO LARGE AND CANNOT BE UPLOADED. PLEASE REDUCE THE SIZE OF THE FILE AND TRY AGAIN.' +\n        '</p>'),\n      fte: $sce.trustAsHtml('<div>' +\n        '<strong>FTE</strong> stands for' +\n        'Full Time Equivalent. This is a useful measure for' +\n        'an organisation that has peopleworking part-time.' +\n        'For a full-time person, FTE is always equal to' +\n        '1.0, whereas for a part-time person, the FTE will represent' +\n        'the fraction of standard hours that the person works on a' +\n        'regular basis.<br>' +\n        'E.g. if the standard working day at an organisation' +\n        'comprises of 8 hours, then a person who regularly works for' +\n        '8 hours each day would be considered to be full- time and' +\n        'would have an FTE value of 1.0. A person who regularly works' +\n        'for only 4 hours each day would be considered to be a' +\n        'part-time person and would have an FTE value of 0.5. If the' +\n        'organisation had 10 people, each with an FTE of 1.0 the' +\n        'actual headcount of full-time people would be 10 and the' +\n        'FTE headcount (equal to actual headcount multiplied by the' +\n        'FTE value) would also be 10. However, if the organisation' +\n        'had another 10 people who each worked part-time with an FTE' +\n        'value of 0.5 the actual headcount of part-time people would' +\n        'be 10 while the FTE headcount would only be 5. Thus for an' +\n        'organisation that had a total of 10 full-time people, and 10' +\n        'part-time people (each with an FTE of 0.5) the actual' +\n        'headcount for the organisation would be 20 while the FTE' +\n        'headcount would be 15.' +\n        '</div>')\n    };\n    $scope.uploader = {\n      details: {\n        contract_file: contractFilesService.uploader('civicrm_hrjobcontract_details')\n      },\n      pension: {\n        evidence_file: contractFilesService.uploader('civicrm_hrjobcontract_pension', 1)\n      }\n    };\n\n    $scope.cancel = cancel;\n    $scope.filesValidate = filesValidate;\n    $scope.save = save;\n\n    // Init\n    (function init () {\n      angular.copy(model, $scope.entity);\n\n      angular.forEach($scope.uploader, function (entity) {\n        angular.forEach(entity, function (field) {\n          field.onAfterAddingAll = function () {\n            $scope.filesValidate();\n          };\n        });\n      });\n\n      // Since we are adding a new Contract, we set the values for each leave type with the AbsenceTypes values\n      setDefaultLeaveValuesFromAbsenceType();\n\n      $rootScope.$broadcast('hrjc-loader-show');\n      fetchInsurancePlanTypes().then(function () {\n        $rootScope.$broadcast('hrjc-loader-hide');\n      });\n    }());\n\n    function cancel () {\n      $modalInstance.dismiss('cancel');\n    }\n\n    /**\n     * Shows a confirmation dialog warning the user that, if they proceed, the staff\n     * leave entitlement will be updated.\n     *\n     * @returns {*}\n     */\n    function confirmUpdateEntitlements () {\n      var modalUpdateEntitlements = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        size: 'sm',\n        templateUrl: settings.pathApp + 'views/modalDialog.html?v=' + (new Date()).getTime(),\n        controller: 'ModalDialogController',\n        resolve: {\n          content: {\n            title: 'Update leave entitlements?',\n            msg: 'The system will now update the staff member leave entitlement.',\n            copyConfirm: 'Proceed'\n          }\n        }\n      });\n\n      return modalUpdateEntitlements.result;\n    }\n\n    function filesValidate () {\n      var entityName, fieldName, i, len, uploaderEntity, uploaderEntityField, uploaderEntityFieldQueue;\n      var fileMaxSize = $scope.fileMaxSize;\n      var isValid = true;\n      var uploader = $scope.uploader;\n\n      for (entityName in uploader) {\n        uploaderEntity = uploader[entityName];\n\n        for (fieldName in uploaderEntity) {\n          i = 0;\n          len = uploaderEntityFieldQueue.length;\n          uploaderEntityField = uploaderEntity[fieldName];\n          uploaderEntityFieldQueue = uploaderEntityField.queue;\n\n          for (; i < len && isValid; i++) {\n            isValid = uploaderEntityFieldQueue[i].file.size < fileMaxSize;\n          }\n        }\n      }\n\n      $scope.contractForm.$setValidity('maxFileSize', isValid);\n    }\n\n    /**\n     * Saves a new contract\n     */\n    function saveContract () {\n      var contract = new Contract();\n\n      contract.$save({\n        action: 'create',\n        json: {\n          sequential: 1,\n          contact_id: settings.contactId,\n          is_primary: utils.contractListLen ? $scope.entity.contract.is_primary : 1\n        }\n      }, function (data) {\n        var modalInstance, promiseContractNew, revisionId;\n        var contract = data.values[0];\n        var contractId = contract.id;\n        var entityDetails = angular.copy($scope.entity.details);\n        var entityHour = $scope.entity.hour;\n        var entityPay = $scope.entity.pay;\n        var entityLeave = $scope.entity.leave;\n        var entityHealth = $scope.entity.health;\n        var entityPension = $scope.entity.pension;\n        var promiseUpload = [];\n        var uploader = $scope.uploader;\n\n        contract.is_current = !entityDetails.period_end_date || moment().diff(entityDetails.period_end_date, 'day') <= 0;\n\n        utilsService.prepareEntityIds(entityDetails, contractId);\n\n        contractDetailsService.save(entityDetails).then(function (results) {\n          revisionId = results.jobcontract_revision_id;\n        }, function (reason) {\n          CRM.alert(reason, 'Error', 'error');\n          contractService.delete(contractId);\n          $modalInstance.dismiss();\n          return $q.reject();\n        }).then(function () {\n          angular.forEach($scope.entity, function (entity) {\n            utilsService.prepareEntityIds(entity, contractId, revisionId);\n          });\n\n          promiseContractNew = [\n            contractHourService.save(entityHour),\n            contractPayService.save(entityPay),\n            contractLeaveService.save(entityLeave),\n            contractHealthService.save(entityHealth),\n            contractPensionService.save(entityPension)\n          ];\n\n          if ($scope.uploader.details.contract_file.queue.length) {\n            promiseUpload.push(contractFilesService.upload(uploader.details.contract_file, revisionId));\n          }\n\n          if ($scope.uploader.pension.evidence_file.queue.length) {\n            promiseUpload.push(contractFilesService.upload(uploader.pension.evidence_file, revisionId));\n          }\n\n          if (promiseUpload.length) {\n            modalInstance = $modal.open({\n              appendTo: $rootElement.find('div').eq(0),\n              templateUrl: settings.pathApp + 'views/modalProgress.html',\n              size: 'sm',\n              controller: 'ModalProgressController',\n              resolve: {\n                uploader: function () {\n                  return uploader;\n                },\n                promiseFilesUpload: function () {\n                  return promiseUpload;\n                }\n              }\n            });\n\n            promiseContractNew.push(modalInstance.result);\n          }\n\n          return $q.all(promiseContractNew);\n        }).then(function () {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.close(contract);\n\n          pubSub.publish('Contract::created', settings.contactId);\n        },\n          function (reason) {\n            CRM.alert(reason, 'Error', 'error');\n            contractService.delete(contractId).then(function (result) {\n              $scope.$broadcast('hrjc-loader-hide');\n              if (result.is_error) {\n                CRM.alert((result.error_message || 'Unknown error'), 'Error', 'error');\n              }\n            }, function (error) {\n              $scope.$broadcast('hrjc-loader-hide');\n              CRM.alert((error || 'Unknown error'), 'Error', 'error');\n            });\n          });\n      }, function (reason) {\n        $scope.$broadcast('hrjc-loader-hide');\n        $modalInstance.dismiss();\n        CRM.alert((reason.statusText || 'Unknown error'), 'Error', 'error');\n        return $q.reject();\n      });\n    }\n\n    /*\n     * Fetch updated Health and Life Insurance Plan Types\n     */\n    function fetchInsurancePlanTypes () {\n      return $q.all([\n        { name: 'hrjobcontract_health_health_plan_type', key: 'plan_type' },\n        { name: 'hrjobcontract_health_life_insurance_plan_type', key: 'plan_type_life_insurance' }\n      ].map(function (planTypeData) {\n        contractHealthService.getOptions(planTypeData.name, true)\n        .then(function (planTypes) {\n          $rootScope.options.health[planTypeData.key] = _.transform(planTypes, function (acc, type) {\n            acc[type.key] = type.value;\n          }, {});\n        });\n      }));\n    }\n\n    function save () {\n      $scope.$broadcast('hrjc-loader-show');\n\n      contractDetailsService.validateDates({\n        contact_id: settings.contactId,\n        period_start_date: $scope.entity.details.period_start_date,\n        period_end_date: $scope.entity.details.period_end_date\n      }).then(function (result) {\n        if (result.success) {\n          confirmUpdateEntitlements()\n            .then(function () {\n              saveContract();\n            },\n              function () {\n                $scope.$broadcast('hrjc-loader-hide');\n              });\n        } else {\n          CRM.alert(result.message, 'Error', 'error');\n          $scope.$broadcast('hrjc-loader-hide');\n        }\n      }, function (reason) {});\n    }\n\n    /**\n     * This method sets the Leave default values based on their respective Absence Type.\n     *\n     * It will set both the leave amount and if public holidays should be added to it.\n     */\n    function setDefaultLeaveValuesFromAbsenceType () {\n      if (!$scope.entity.leave) {\n        return;\n      }\n\n      $scope.entity.leave.forEach(function (leave, index) {\n        var absenceTypeID = $scope.entity.leave[index].leave_type;\n\n        $scope.entity.leave[index].leave_amount = utils.absenceTypes[absenceTypeID].default_entitlement;\n        $scope.entity.leave[index].add_public_holidays = utils.absenceTypes[absenceTypeID].add_public_holiday_to_entitlement;\n      });\n    }\n  }\n\n  return ModalContractNewController;\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-contract-new.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/modal/modal-contract.controller',[\n  'common/angular',\n  'common/lodash'\n], function (angular, _) {\n  'use strict';\n\n  ModalContractController.__name = 'ModalContractController';\n  ModalContractController.$inject = [\n    '$scope', '$uibModal', '$uibModalInstance', '$q', '$rootElement', '$rootScope',\n    '$filter', 'contractService', 'contractRevisionService', 'contractDetailsService',\n    'contractHourService', 'contractPayService', 'contractLeaveService',\n    'contractHealthService', 'contractPensionService', 'contractFilesService',\n    'action', 'entity', 'content', 'files', 'utilsService', 'utils', 'settings',\n    '$log', 'pubSub'\n  ];\n\n  function ModalContractController ($scope, $modal, $modalInstance, $q, $rootElement,\n    $rootScope, $filter, contractService, contractRevisionService, contractDetailsService,\n    contractHourService, contractPayService, contractLeaveService, contractHealthService,\n    contractPensionService, contractFilesService, action, entity, content, files,\n    utilsService, utils, settings, $log, pubSub) {\n    $log.debug('Controller: ModalContractController');\n\n    var copy = content.copy || {};\n\n    copy.close = copy.close || 'Close';\n    copy.save = copy.save || 'Save changes';\n    copy.title = copy.title || 'Contract';\n\n    $scope.action = action || 'view';\n    $scope.allowSave = typeof content.allowSave !== 'undefined' ? content.allowSave : false;\n    $scope.copy = copy;\n    $scope.entity = {};\n    $scope.fileMaxSize = settings.CRM.maxFileSize || 0;\n    $scope.files = {};\n    $scope.filesTrash = {};\n    $scope.isDisabled = typeof content.isDisabled !== 'undefined' ? content.isDisabled : true;\n    $scope.isPrimaryDisabled = +entity.contract.is_primary;\n    $scope.showIsPrimary = utils.contractListLen > 1 && action !== 'change';\n    $scope.uploader = {\n      details: {\n        contract_file: contractFilesService.uploader('civicrm_hrjobcontract_details')\n      },\n      pension: {\n        evidence_file: contractFilesService.uploader('civicrm_hrjobcontract_pension', 1)\n      }\n    };\n    $scope.utils = utils;\n\n    angular.copy(entity, $scope.entity);\n    angular.copy(files, $scope.files);\n    $scope.entity.details.period_start_date = convertToDateObject($scope.entity.details.period_start_date);\n    $scope.entity.details.period_end_date = convertToDateObject($scope.entity.details.period_end_date);\n\n    // Init\n    (function init () {\n      angular.forEach($scope.files, function (entityFiles, entityName) {\n        $scope.filesTrash[entityName] = [];\n      });\n\n      $modalInstance.opened.then(function () {\n        $rootScope.$broadcast('hrjc-loader-hide');\n      });\n\n      angular.forEach($scope.uploader, function (entity) {\n        angular.forEach(entity, function (field) {\n          field.onAfterAddingAll = function () {\n            $scope.filesValidate();\n          };\n        });\n      });\n\n      $rootScope.$broadcast('hrjc-loader-show');\n      fetchInsurancePlanTypes().then(function () {\n        $rootScope.$broadcast('hrjc-loader-hide');\n      });\n    }());\n\n    $scope.cancel = function () {\n      if (action === 'view' ||\n        (angular.equals(entity, $scope.entity) && angular.equals(files, $scope.files) &&\n          !$scope.uploader.details.contract_file.queue.length && !$scope.uploader.pension.evidence_file.queue.length)) {\n        $scope.$broadcast('hrjc-loader-hide');\n        $modalInstance.dismiss('cancel');\n        return;\n      }\n\n      // DEBUG\n      if (settings.debug) {\n        angular.forEach(entity, function (entityData, entityName) {\n          if (!angular.equals(entityData, $scope.entity[entityName])) {\n            $log.debug('======================');\n            $log.debug('Changed entity: ' + entityName);\n            $log.debug('Before:');\n            $log.debug(entityData);\n            $log.debug('After:');\n            $log.debug($scope.entity[entityName]);\n          }\n        });\n      }\n\n      var modalInstance = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalDialog.html?v=' + (new Date()).getTime(),\n        size: 'sm',\n        controller: 'ModalDialogController',\n        resolve: {\n          content: function () {\n            return {\n              copyCancel: 'No',\n              title: 'Alert',\n              msg: 'Are you sure you want to cancel? Changes will be lost!'\n            };\n          }\n        }\n      });\n\n      modalInstance.result.then(function (confirm) {\n        if (confirm) {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.dismiss('cancel');\n        }\n      });\n    };\n\n    $scope.fileMoveToTrash = function (index, entityName) {\n      var entityFiles = $scope.files[entityName];\n      var entityFilesTrash = $scope.filesTrash[entityName];\n\n      entityFilesTrash.push(entityFiles[index]);\n      entityFiles.splice(index, 1);\n    };\n\n    $scope.filesValidate = function () {\n      var entityName, fieldName, i, len, uploaderEntity, uploaderEntityField, uploaderEntityFieldQueue;\n      var fileMaxSize = $scope.fileMaxSize;\n      var uploader = $scope.uploader;\n      var isValid = true;\n\n      for (entityName in uploader) {\n        uploaderEntity = uploader[entityName];\n\n        for (fieldName in uploaderEntity) {\n          i = 0;\n          len = uploaderEntityFieldQueue.length;\n          uploaderEntityField = uploaderEntity[fieldName];\n          uploaderEntityFieldQueue = uploaderEntityField.queue;\n\n          for (; i < len && isValid; i++) {\n            isValid = uploaderEntityFieldQueue[i].file.size < fileMaxSize;\n          }\n        }\n      }\n\n      $scope.contractForm.$setValidity('maxFileSize', isValid);\n    };\n\n    if ($scope.allowSave) {\n      $scope.save = function () {\n        $scope.$broadcast('hrjc-loader-show');\n        contractDetailsService.validateDates({\n          contact_id: settings.contactId,\n          period_start_date: $scope.entity.details.period_start_date,\n          period_end_date: $scope.entity.details.period_end_date,\n          jobcontract_id: entity.contract.id\n        }).then(function (result) {\n          if (result.success) {\n            confirmUpdateEntitlements()\n              .then(function () {\n                processContractUpdate();\n              });\n          } else {\n            CRM.alert(result.message, 'Error', 'error');\n            $scope.$broadcast('hrjc-loader-hide');\n          }\n        }, function (reason) {});\n        $scope.$broadcast('hrjc-loader-hide');\n      };\n    }\n\n    function processContractUpdate () {\n      if (angular.equals(entity, $scope.entity) &&\n        angular.equals(files, $scope.files) &&\n        !$scope.uploader.details.contract_file.queue.length &&\n        !$scope.uploader.pension.evidence_file.queue.length) {\n        $scope.$broadcast('hrjc-loader-hide');\n        $modalInstance.dismiss('cancel');\n        return;\n      }\n\n      switch (action) {\n        case 'edit':\n          if ($scope.entity.contract.is_primary === entity.contract.is_primary) {\n            confirmEdit().then(function (confirmed) {\n              switch (confirmed) {\n                case 'edit':\n                  contractEdit();\n                  break;\n                case 'change':\n                  changeReason().then(function (results) {\n                    contractChange(results.reasonId, results.date);\n                  });\n                  break;\n              }\n            });\n          } else {\n            contractEdit();\n          }\n          break;\n        case 'change':\n          changeReason().then(function (results) {\n            contractChange(results.reasonId, results.date);\n          });\n          break;\n        default:\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.dismiss('cancel');\n      }\n    }\n\n    /**\n     * Shows a confirmation dialog warning the user that, if they proceed, the staff\n     * leave entitlement will be updated.\n     *\n     * @returns {*}\n     */\n    function confirmUpdateEntitlements () {\n      var modalUpdateEntitlements = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        size: 'sm',\n        templateUrl: settings.pathApp + 'views/modalDialog.html?v=' + (new Date()).getTime(),\n        controller: 'ModalDialogController',\n        resolve: {\n          content: {\n            title: 'Update leave entitlements?',\n            msg: 'The system will now update the staff member leave entitlement.',\n            copyConfirm: 'Proceed'\n          }\n        }\n      });\n\n      return modalUpdateEntitlements.result;\n    }\n\n    /**\n     * # TO DO: This should probably happen inside the service that returns the data #\n     *\n     * Converts a date string into a Date object (if string is not empty)\n     *\n     * @param {string} dateString\n     * @param {Date/null}\n     */\n    function convertToDateObject (dateString) {\n      var dateObj = $filter('formatDate')(dateString, Date);\n\n      return dateObj !== 'Unspecified' ? dateObj : dateString;\n    }\n\n    function changeReason () {\n      var modalChangeReason = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalChangeReason.html?v=' + (new Date()).getTime(),\n        controller: 'ModalChangeReasonController',\n        resolve: {\n          content: function () {\n            return {\n              copy: {\n                title: copy.title\n              }\n            };\n          },\n          date: null,\n          reasonId: null\n        }\n      });\n\n      return modalChangeReason.result;\n    }\n\n    function confirmEdit () {\n      var modalConfirmEdit = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        templateUrl: settings.pathApp + 'views/modalConfirmEdit.html?v=' + (new Date()).getTime(),\n        controller: 'ModalDialogController',\n        resolve: {\n          content: function () {\n            return {\n              msg: 'Save without making a new revision?'\n            };\n          }\n        }\n      });\n\n      return modalConfirmEdit.result;\n    }\n\n    function contractEdit () {\n      $scope.$broadcast('hrjc-loader-show');\n      $scope.entity.details.period_end_date = $scope.entity.details.period_end_date || '';\n\n      var entityName, file, i, len, modalInstance;\n      var entityNew = angular.copy($scope.entity);\n      var filesTrash = $scope.filesTrash;\n      var uploader = $scope.uploader;\n\n      var promiseContractEdit = {\n        contract: contractService.save(entityNew.contract),\n        details: contractDetailsService.save(entityNew.details),\n        hour: contractHourService.save(entityNew.hour),\n        pay: contractPayService.save(entityNew.pay),\n        leave: contractLeaveService.save(entityNew.leave),\n        health: contractHealthService.save(entityNew.health),\n        pension: contractPensionService.save(entityNew.pension)\n      };\n      var promiseFilesEditUpload = [];\n      var promiseFilesEditDelete = [];\n\n      for (entityName in filesTrash) {\n        i = 0;\n        len = filesTrash[entityName].length;\n        for (i; i < len; i++) {\n          file = filesTrash[entityName][i];\n          promiseFilesEditDelete.push(contractFilesService.delete(file.fileID, file.entityID, file.entityTable));\n        }\n      }\n\n      angular.extend(promiseContractEdit, {\n        files: promiseFilesEditDelete.length ? $q.all(promiseFilesEditDelete) : false\n      });\n\n      $q.all(promiseContractEdit).then(function (results) {\n        angular.forEach(uploader, function (entity) {\n          angular.forEach(entity, function (field) {\n            angular.forEach(field.queue, function (item) {\n              if (item.file.size > $scope.fileMaxSize) {\n                item.remove();\n              }\n            });\n          });\n        });\n\n        if (uploader.details.contract_file.queue.length) {\n          promiseFilesEditUpload.push(contractFilesService.upload(uploader.details.contract_file, entityNew.details.jobcontract_revision_id));\n        }\n\n        if (uploader.pension.evidence_file.queue.length) {\n          promiseFilesEditUpload.push(contractFilesService.upload(uploader.pension.evidence_file, entityNew.pension.jobcontract_revision_id));\n        }\n\n        // TODO (incorrect date format in the API response)\n        results.details.period_start_date = entityNew.details.period_start_date;\n        results.details.period_end_date = entityNew.details.period_end_date;\n        //\n\n        // TODO (incorrect JSON format in the API response)\n        results.pay.annual_benefits = entityNew.pay.annual_benefits;\n        results.pay.annual_deductions = entityNew.pay.annual_deductions;\n\n        if (promiseFilesEditUpload.length) {\n          modalInstance = $modal.open({\n            appendTo: $rootElement.find('div').eq(0),\n            templateUrl: settings.pathApp + 'views/modalProgress.html?v=' + (new Date()).getTime(),\n            size: 'sm',\n            controller: 'ModalProgressController',\n            resolve: {\n              uploader: function () {\n                return uploader;\n              },\n              promiseFilesUpload: function () {\n                return promiseFilesEditUpload;\n              }\n            }\n          });\n\n          results.files = modalInstance.result;\n          return $q.all(results);\n        }\n\n        return results;\n      }).then(function (results) {\n        $scope.$broadcast('hrjc-loader-hide');\n        $modalInstance.close(results);\n        pubSub.publish('Contract::updated');\n      }, function (reason) {\n        $scope.$broadcast('hrjc-loader-hide');\n        CRM.alert(reason, 'Error', 'error');\n      });\n    }\n\n    function contractChange (reasonId, date) {\n      $scope.$broadcast('hrjc-loader-show');\n\n      contractRevisionService.validateEffectiveDate({\n        contact_id: settings.contactId,\n        effective_date: date\n      }).then(function (result) {\n        if (result.success) {\n          saveContractChange(reasonId, date);\n        } else {\n          CRM.alert(result.message, 'Error', 'error');\n          $scope.$broadcast('hrjc-loader-hide');\n        }\n      }, function (reason) {});\n    }\n\n    function saveContractChange (reasonId, date) {\n      var entityName, entityFilesTrashLen, field, fieldName, file, ii,\n        isChanged, item, modalInstance, revisionId;\n      var entityChangedList = [];\n      var entityNew = angular.copy($scope.entity);\n      var filesTrash = $scope.filesTrash;\n      var uploader = $scope.uploader;\n      var entityChangedListLen = 0;\n      var fieldQueueLen = 0;\n      var i = 0;\n      var promiseContractChange = {};\n      var promiseFilesChangeDelete = [];\n      var promiseFilesChangeUpload = [];\n      var entityServices = {\n        details: contractDetailsService,\n        hour: contractHourService,\n        pay: contractPayService,\n        leave: contractLeaveService,\n        health: contractHealthService,\n        pension: contractPensionService\n      };\n\n      for (entityName in entityServices) {\n        isChanged = !angular.equals(entity[entityName], entityNew[entityName]);\n\n        if (!isChanged) {\n          isChanged = !!filesTrash[entityName] && !!filesTrash[entityName].length;\n\n          if (!isChanged && uploader[entityName]) {\n            for (fieldName in uploader[entityName]) {\n              field = uploader[entityName][fieldName];\n              if (field.queue.length) {\n                isChanged = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (isChanged) {\n          entityChangedList[i] = {};\n          entityChangedList[i].name = entityName;\n          entityChangedList[i].data = entityNew[entityName];\n          entityChangedList[i].service = entityServices[entityName];\n          i++;\n          entityChangedListLen = i;\n        }\n      }\n\n      if (entityChangedListLen) {\n        utilsService.prepareEntityIds(entityChangedList[0].data, entity.contract.id);\n\n        entityChangedList[0].service.save(entityChangedList[0].data).then(function (results) {\n          i = 1;\n          revisionId = !angular.isArray(results) ? results.jobcontract_revision_id : results[0].jobcontract_revision_id;\n          promiseContractChange[entityChangedList[0].name] = results;\n\n          for (i; i < entityChangedListLen; i++) {\n            entityName = entityChangedList[i].name;\n\n            utilsService.prepareEntityIds(entityChangedList[i].data, entity.contract.id, revisionId);\n            promiseContractChange[entityName] = entityChangedList[i].service.save(entityChangedList[i].data);\n          }\n\n          return $q.all(angular.extend(promiseContractChange, {\n            revisionCreated: contractService.saveRevision({\n              id: revisionId,\n              change_reason: reasonId,\n              effective_date: date\n            })\n          }, {\n            files: false\n          }));\n        }).then(function (results) {\n          for (entityName in entityServices) {\n            results[entityName] = results[entityName] || entityNew[entityName];\n\n            if (filesTrash[entityName] && filesTrash[entityName].length) {\n              i = 0;\n              entityFilesTrashLen = filesTrash[entityName].length;\n              for (i; i < entityFilesTrashLen; i++) {\n                file = filesTrash[entityName][i];\n                promiseFilesChangeDelete.push(contractFilesService.delete(file.fileID, revisionId, file.entityTable));\n              }\n            }\n          }\n\n          // TODO (incorrect date format in the API response)\n          results.details.period_start_date = entityNew.details.period_start_date;\n          results.details.period_end_date = entityNew.details.period_end_date;\n          results.revisionCreated.effective_date = date || '';\n          //\n\n          // TODO (incorrect JSON format in the API response)\n          results.pay.annual_benefits = entityNew.pay.annual_benefits;\n          results.pay.annual_deductions = entityNew.pay.annual_deductions;\n\n          angular.extend(results.revisionCreated, {\n            details_revision_id: results.details.jobcontract_revision_id,\n            health_revision_id: results.health.jobcontract_revision_id,\n            hour_revision_id: results.hour.jobcontract_revision_id,\n            jobcontract_id: entity.contract.id,\n            leave_revision_id: results.leave[0].jobcontract_revision_id,\n            pay_revision_id: results.pay.jobcontract_revision_id,\n            pension_revision_id: results.pension.jobcontract_revision_id\n          });\n\n          if (promiseFilesChangeDelete.length) {\n            results.files = $q.all(promiseFilesChangeDelete);\n            return $q.all(results);\n          }\n\n          return results;\n        }).then(function (results) {\n          i = 0;\n          for (i; i < entityChangedListLen; i++) {\n            entityName = entityChangedList[i].name;\n\n            if (uploader[entityName]) {\n              for (fieldName in uploader[entityName]) {\n                field = uploader[entityName][fieldName];\n                fieldQueueLen = field.queue.length;\n                ii = 0;\n\n                for (ii; ii < fieldQueueLen; ii++) {\n                  item = field.queue[ii];\n                  if (item.file.size > $scope.fileMaxSize) {\n                    item.remove();\n                    ii--;\n                    fieldQueueLen--;\n                  }\n                }\n\n                if (fieldQueueLen) {\n                  promiseFilesChangeUpload.push(contractFilesService.upload(field, revisionId));\n                }\n              }\n            }\n          }\n\n          if (promiseFilesChangeUpload.length) {\n            modalInstance = $modal.open({\n              appendTo: $rootElement.find('div').eq(0),\n              templateUrl: settings.pathApp + 'views/modalProgress.html',\n              size: 'sm',\n              controller: 'ModalProgressController',\n              resolve: {\n                uploader: function () {\n                  return uploader;\n                },\n                promiseFilesUpload: function () {\n                  return promiseFilesChangeUpload;\n                }\n              }\n            });\n\n            results.files = modalInstance.result;\n            return $q.all(results);\n          }\n\n          return results;\n        }).then(function (results) {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.close(results);\n          pubSub.publish('Contract::updated');\n        });\n      } else {\n        $scope.$broadcast('hrjc-loader-hide');\n        $modalInstance.close();\n      }\n    }\n\n    /*\n     * Fetch updated Health and Life Insurance Plan Types\n     */\n    function fetchInsurancePlanTypes () {\n      return $q.all([\n        { name: 'hrjobcontract_health_health_plan_type', key: 'plan_type' },\n        { name: 'hrjobcontract_health_life_insurance_plan_type', key: 'plan_type_life_insurance' }\n      ].map(function (planTypeData) {\n        contractHealthService.getOptions(planTypeData.name, true)\n        .then(function (planTypes) {\n          $rootScope.options.health[planTypeData.key] = _.transform(planTypes, function (acc, type) {\n            acc[type.key] = type.value;\n          }, {});\n        });\n      }));\n    }\n  }\n\n  return ModalContractController;\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-contract.controller.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/modal/modal-dialog.controller',[],function () {\n  'use strict';\n\n  ModalDialogController.__name = 'ModalDialogController';\n  ModalDialogController.$inject = [\n    '$log', '$scope', '$timeout', '$uibModalInstance', 'content'\n  ];\n\n  function ModalDialogController ($log, $scope, $timeout, $modalInstance, content) {\n    $log.debug('Controller: ModalDialogController');\n\n    $scope.copyCancel = content.copyCancel || 'Cancel';\n    $scope.copyConfirm = content.copyConfirm || 'Yes';\n    $scope.msg = content.msg || '';\n    $scope.title = content.title || 'CiviHR Job Contract';\n\n    $scope.cancel = cancel;\n    $scope.confirm = confirm;\n\n    function cancel () {\n      $modalInstance.dismiss('Cancel');\n    }\n\n    function confirm (action) {\n      $modalInstance.close(action || true);\n    }\n  }\n\n  return ModalDialogController;\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-dialog.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/modal/modal-progress.controller',[],function () {\n  'use strict';\n\n  ModalProgressController.__name = 'ModalProgressController';\n  ModalProgressController.$inject = [\n    '$log', '$q', '$scope', '$timeout', '$uibModalInstance', 'uploader',\n    'promiseFilesUpload'\n  ];\n\n  function ModalProgressController ($log, $q, $scope, $timeout, $modalInstance, uploader,\n    promiseFilesUpload) {\n    $log.debug('Controller: ModalProgressController');\n\n    var entityName, fieldName;\n\n    $scope.uploader = uploader;\n\n    $scope.cancel = cancel;\n\n    (function init () {\n      for (entityName in uploader) {\n        for (fieldName in uploader[entityName]) {\n          if (uploader[entityName][fieldName].queue.length) {\n            uploader[entityName][fieldName].item = uploader[entityName][fieldName].queue[0].file.name;\n          }\n          uploader[entityName][fieldName].onProgressItem = function (item) {\n            this.item = item.file.name;\n          };\n        }\n      }\n\n      $q.all(promiseFilesUpload).then(function (results) {\n        $timeout(function () {\n          $modalInstance.close(results);\n        }, 500);\n      });\n    }());\n\n    function cancel () {\n      $modalInstance.dismiss('File upload canceled');\n    }\n  }\n\n  return ModalProgressController;\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-progress.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/modal/modal-revision.controller',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  ModalRevisionController.__name = 'ModalRevisionController';\n  ModalRevisionController.$inject = [\n    '$filter', '$log', '$q', '$rootScope', '$scope', '$uibModalInstance', 'settings',\n    'revisionDataList', 'revisionList', 'entity', 'fields', 'model', 'modalContract',\n    'utils', 'contactService'\n  ];\n\n  function ModalRevisionController ($filter, $log, $q, $rootScope, $scope, $modalInstance,\n    settings, revisionDataList, revisionList, entity, fields, model, modalContract,\n    utils, contactService) {\n    $log.debug('Controller: ModalRevisionController');\n\n    $scope.$broadcast('hrjc-loader-show');\n    $scope.currentPage = 1;\n    $scope.entity = entity;\n    $scope.fields = angular.copy(fields);\n    $scope.itemsPerPage = 5;\n    $scope.revisionDataList = [];\n    $scope.revisionList = [];\n    $scope.sortCol = 'effective_date';\n    $scope.subFields = {};\n    $scope.maxSize = 5;\n    $scope.modalContract = modalContract;\n    $scope.sortReverse = true;\n    $scope.urlCSV = urlCSVBuild();\n\n    $scope.cancel = cancel;\n    $scope.createPage = createPage;\n    $scope.sortBy = sortBy;\n    $scope.toggleFieldsSelected = toggleFieldsSelected;\n\n    (function init () {\n      initA();\n      initB();\n      initC();\n      initWatchers();\n\n      $scope.sortBy();\n      $modalInstance.opened.then(function () {\n        $rootScope.$broadcast('hrjc-loader-hide');\n      });\n    }());\n\n    function cancel () {\n      $modalInstance.dismiss('cancel');\n    }\n\n    function createPage () {\n      var start = (($scope.currentPage - 1) * $scope.itemsPerPage);\n      var end = start + $scope.itemsPerPage;\n\n      $scope.revisionDataListPage = $scope.revisionDataList.slice(start, end);\n    }\n\n    function initA () {\n      var i = 0;\n      var len = $scope.fields.length;\n      var field;\n\n      for (i; i < len; i++) {\n        field = $scope.fields[i];\n        field.selected = true;\n        field.isArray = field.name === 'leave_type' || field.name === 'leave_amount';\n\n        if (field.name === 'id' || field.name === 'jobcontract_revision_id') {\n          field.display = false;\n          continue;\n        }\n\n        field.display = true;\n      }\n\n      $scope.fields.unshift({\n        name: 'effective_date',\n        title: 'Effective Date',\n        display: true,\n        selected: true,\n        isArray: false,\n        extends: true\n      });\n\n      $scope.fields.push({\n        name: 'editor_name',\n        title: 'Change Recorded By',\n        display: true,\n        selected: true,\n        isArray: false,\n        extends: true\n      }, {\n        name: 'change_reason',\n        title: 'Reason For Change',\n        display: true,\n        selected: true,\n        isArray: false,\n        extends: true\n      });\n    }\n\n    function initB () {\n      var i = 0;\n      var iNext;\n      var isLast;\n      var len = revisionDataList.length;\n\n      for (i; i < len; i++) {\n        iNext = i + 1;\n        isLast = iNext === len;\n\n        if (!revisionDataList[i]) {\n          revisionDataList[i] = model;\n        }\n\n        if (!isLast && !revisionDataList[iNext]) {\n          revisionDataList[iNext] = model;\n        }\n\n        if (angular.isArray(revisionDataList[i])) {\n          revisionDataList[i] = {\n            jobcontract_revision_id: revisionDataList[i][0].jobcontract_revision_id,\n            data: revisionDataList[i]\n          };\n        }\n\n        angular.extend(revisionDataList[i], {\n          effective_date: $filter('date')(revisionList[i].effective_date, 'yyyy/MM/dd') || '',\n          editor_name: revisionList[i].editor_name || '',\n          change_reason: $rootScope.options.contract.change_reason[revisionList[i].change_reason] || '',\n          details_revision_id: revisionList[i].details_revision_id,\n          health_revision_id: revisionList[i].health_revision_id,\n          hour_revision_id: revisionList[i].hour_revision_id,\n          leave_revision_id: revisionList[i].leave_revision_id,\n          pay_revision_id: revisionList[i].pay_revision_id,\n          pension_revision_id: revisionList[i].pension_revision_id,\n          role_revision_id: revisionList[i].role_revision_id\n        });\n        $scope.revisionDataList.push(revisionDataList[i]);\n      }\n    }\n\n    function initC () {\n      switch (entity) {\n        case 'hour':\n          (function () {\n            var hoursLocation;\n            angular.forEach($scope.revisionDataList, function (revisionData) {\n              if (revisionData.location_standard_hours) {\n                hoursLocation = $filter('filter')(utils.hoursLocation, {id: revisionData.location_standard_hours})[0];\n                revisionData.location_standard_hours = hoursLocation.location + ': ' +\n                                hoursLocation.standard_hours + 'h per ' +\n                                hoursLocation.periodicity;\n              }\n            });\n          })();\n          break;\n        case 'health':\n          angular.forEach($scope.revisionDataList, function (revisionData) {\n            if (revisionData.provider) {\n              contactService.getOne(revisionData.provider).then(function (contact) {\n                revisionData.provider = contact.label;\n              });\n            }\n\n            if (revisionData.provider_life_insurance) {\n              contactService.getOne(revisionData.provider_life_insurance).then(function (contact) {\n                revisionData.provider_life_insurance = contact.label;\n              });\n            }\n          });\n          break;\n        case 'pay':\n          (function () {\n            var payScaleGrade;\n            angular.forEach($scope.revisionDataList, function (revisionData) {\n              if (revisionData.pay_scale) {\n                payScaleGrade = $filter('filter')(utils.payScaleGrade, {id: revisionData.pay_scale})[0] || $filter('filter')(utils.payScaleGrade, {pay_scale: revisionData.pay_scale})[0];\n                revisionData.pay_scale = payScaleGrade.pay_scale +\n                                (payScaleGrade.currency ? ' - ' + $rootScope.options.pay.pay_currency[payScaleGrade.currency] : '') +\n                                (payScaleGrade.amount ? ' ' + payScaleGrade.amount : '') +\n                                (payScaleGrade.pay_frequency ? ' per ' + payScaleGrade.pay_frequency : '');\n              }\n            });\n          })();\n\n          $filter('filter')($scope.fields, {name: 'pay_is_auto_est'})[0].pseudoconstant = true;\n\n          $scope.subFields = {\n            annual_benefits: [{\n              name: 'name',\n              title: 'Benefit',\n              pseudoconstant: 'benefit_name'\n            }, {\n              name: 'type',\n              title: 'Type',\n              pseudoconstant: 'benefit_type'\n            }, {\n              name: 'amount_pct',\n              title: '% amount',\n              pseudoconstant: false\n            }, {\n              name: 'amount_abs',\n              title: 'Absolute amount',\n              pseudoconstant: false\n            }],\n            annual_deductions: [{\n              name: 'name',\n              title: 'Deduction',\n              pseudoconstant: 'deduction_name'\n            }, {\n              name: 'type',\n              title: 'Type',\n              pseudoconstant: 'deduction_type'\n            }, {\n              name: 'amount_pct',\n              title: '% amount',\n              pseudoconstant: false\n            }, {\n              name: 'amount_abs',\n              title: 'Absolute amount',\n              pseudoconstant: false\n            }]\n          };\n          break;\n        case 'pension':\n          $filter('filter')($scope.fields, {name: 'is_enrolled'})[0].pseudoconstant = true;\n          break;\n      }\n    }\n\n    function initWatchers () {\n      $scope.$watch('currentPage', function () {\n        $scope.createPage();\n      });\n    }\n\n    function sortBy (sortCol, sortReverse) {\n      if (typeof sortCol !== 'undefined') {\n        if ($scope.sortCol === sortCol) {\n          $scope.sortReverse = !$scope.sortReverse;\n        } else {\n          $scope.sortCol = sortCol;\n        }\n      }\n\n      if (typeof sortReverse !== 'undefined') {\n        $scope.sortReverse = sortReverse;\n      }\n\n      $scope.revisionDataList = $filter('orderBy')($scope.revisionDataList, $scope.sortCol, $scope.sortReverse);\n    }\n\n    function toggleFieldsSelected (field) {\n      field.selected = !field.selected;\n      $scope.urlCSV = urlCSVBuild();\n    }\n\n    function urlCSVBuild () {\n      var url = settings.pathReport + (settings.pathReport.indexOf('?') > -1 ? '&' : '?');\n      var entityName = $scope.entity;\n      var fieldName;\n      var prefix;\n\n      angular.forEach($scope.fields, function (field) {\n        fieldName = field.name !== 'editor_name' ? field.name : 'editor_uid';\n        prefix = !field.extends ? (entityName + '_') : '';\n\n        if (field.selected) {\n          url += 'fields[' + prefix + fieldName + ']=1&';\n        }\n      });\n\n      url += 'fields[sort_name]=1' +\n                      '&fields[first_name]=1' +\n                      '&fields[last_name]=1' +\n                      '&fields[external_identifier]=1' +\n                      '&fields[email]=1' +\n                      '&fields[street_address]=1' +\n                      '&fields[city]=1' +\n                      '&fields[name]=1' +\n                      '&fields[contract_contact_id]=1' +\n                      '&fields[contract_contract_id]=1' +\n                      '&fields[jobcontract_revision_id]=1' +\n                      '&fields[change_reason]=1' +\n                      '&fields[created_date]=1' +\n                      '&fields[effective_date]=1' +\n                      '&fields[modified_date]=1' +\n                      '&order_bys[1][column]=id&order_bys[1][order]=ASC' +\n                      '&order_bys[2][column]=civicrm_hrjobcontract_revision_revision_id&order_bys[2][order]=ASC' +\n                      '&order_bys[3][column]=-&order_bys[3][order]=ASC' +\n                      '&order_bys[4][column]=-&order_bys[4][order]=ASC' +\n                      '&order_bys[5][column]=-&order_bys[5][order]=ASC' +\n                      '&contract_id_op=eq&permission=access+CiviReport' +\n                      '&row_count=' +\n                      '&_qf_Summary_submit_csv=Preview+CSV' +\n                      '&groups=' +\n                      '&contract_id_value=' + revisionList[0].jobcontract_id +\n                      '&group_bys[civicrm_hrjobcontract_revision_revision_id]=1';\n\n      return url;\n    }\n  }\n\n  return ModalRevisionController;\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-revision.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.controllers',[\n  'common/angular',\n  'job-contract/controllers/contract.controller',\n  'job-contract/controllers/contract-list.controller',\n  'job-contract/controllers/revision-list.controller',\n  'job-contract/controllers/form/form-general.controller',\n  'job-contract/controllers/form/form-health.controller',\n  'job-contract/controllers/form/form-hour.controller',\n  'job-contract/controllers/form/form-leave.controller',\n  'job-contract/controllers/form/form-pay.controller',\n  'job-contract/controllers/form/form-pension.controller',\n  'job-contract/controllers/modal/modal-change-reason.controller',\n  'job-contract/controllers/modal/modal-contract-new.controller',\n  'job-contract/controllers/modal/modal-contract.controller',\n  'job-contract/controllers/modal/modal-dialog.controller',\n  'job-contract/controllers/modal/modal-progress.controller',\n  'job-contract/controllers/modal/modal-revision.controller'\n], function (angular, ContractController, ContractListController, RevisionListController, FormGeneralController,\n  FormHealthController, FormHourController, FormLeaveController, FormPayController, FormPensionController,\n  ModalChangeReasonController, ModalContractNewController, ModalContractController, ModalDialogController,\n  ModalProgressController, ModalRevisionController) {\n  'use strict';\n\n  return angular.module('job-contract.controllers', [])\n    .controller(ContractController.__name, ContractController)\n    .controller(ContractListController.__name, ContractListController)\n    .controller(RevisionListController.__name, RevisionListController)\n    .controller(FormGeneralController.__name, FormGeneralController)\n    .controller(FormHealthController.__name, FormHealthController)\n    .controller(FormHourController.__name, FormHourController)\n    .controller(FormLeaveController.__name, FormLeaveController)\n    .controller(FormPayController.__name, FormPayController)\n    .controller(FormPensionController.__name, FormPensionController)\n    .controller(ModalChangeReasonController.__name, ModalChangeReasonController)\n    .controller(ModalContractNewController.__name, ModalContractNewController)\n    .controller(ModalContractController.__name, ModalContractController)\n    .controller(ModalDialogController.__name, ModalDialogController)\n    .controller(ModalProgressController.__name, ModalProgressController)\n    .controller(ModalRevisionController.__name, ModalRevisionController);\n});\n\n//# sourceURL=/job-contract/modules/job-contract.controllers.js"),eval("/* eslint-env amd */\n\n(function (CRM) {\n  define('leave-absences/shared/modules/shared-settings',[\n    'common/angular'\n  ], function (angular) {\n    return angular.module('leave-absences.settings', []).constant('shared-settings', {\n      attachmentToken: CRM.vars.leaveAndAbsences.attachmentToken,\n      debug: CRM.debug,\n      managerPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/manager-leave/',\n      sharedPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/shared/',\n      serverDateFormat: 'YYYY-MM-DD',\n      serverDateTimeFormat: 'YYYY-MM-DD HH:mm:ss',\n      permissions: {\n        admin: {\n          access: 'access leave and absences',\n          administer: 'administer leave and absences'\n        },\n        ssp: {\n          access: 'access leave and absences in ssp',\n          manage: 'manage leave and absences in ssp'\n        }\n      },\n      fileUploader: {\n        queueLimit: 10\n      },\n      statusNames: {\n        approved: 'approved',\n        adminApproved: 'admin_approved',\n        awaitingApproval: 'awaiting_approval',\n        moreInformationRequired: 'more_information_required',\n        rejected: 'rejected',\n        cancelled: 'cancelled'\n      }\n    });\n  });\n})(CRM);\n\n//# sourceURL=/vagrant/hr1706/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/shared-settings.js"),eval("define('leave-absences/shared/modules/apis',[\n  'common/angular',\n  'common/modules/apis',\n  'leave-absences/shared/modules/shared-settings',\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.apis', [\n    'common.apis',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1706/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/apis.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models-instances',[\n  'common/angular',\n  'common/models/instances/instance',\n  'common/modules/services',\n  'common/modules/models',\n  'common/services/check-permissions',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models.instances', [\n    'common.models',\n    'common.models.instances',\n    'common.services',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1706/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/models-instances.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models',[\n  'common/angular',\n  'common/modules/models',\n  'common/modules/services',\n  'leave-absences/shared/modules/apis',\n  'leave-absences/shared/modules/models-instances',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models', [\n    'common.models',\n    'common.services',\n    'leave-absences.apis',\n    'leave-absences.models.instances',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1706/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/models.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/apis/absence-type.api',[\n  'common/lodash',\n  'common/moment',\n  'leave-absences/shared/modules/apis',\n  'common/services/api'\n], function (_, moment, apis) {\n  'use strict';\n\n  apis.factory('AbsenceTypeAPI', ['$log', 'api', 'shared-settings', function ($log, api, sharedSettings) {\n    $log.debug('AbsenceTypeAPI');\n\n    return api.extend({\n\n      /**\n       * This method returns all the active AbsenceTypes unless specified in param.\n       *\n       * @param  {Object} params  matches the api endpoint params (title, weight etc)\n       * @return {Promise}\n       */\n      all: function (params) {\n        $log.debug('AbsenceTypeAPI.all');\n\n        return this.sendGET('AbsenceType', 'get', _.defaults(params || {}, { is_active: true }))\n          .then(function (data) {\n            return data.values;\n          });\n      },\n\n      /**\n       * Calculate Toil Expiry Date\n       *\n       * @param  {string} absenceTypeID\n       * @param  {Object} date\n       * @param  {Object} params\n       * @return {Promise}\n       */\n      calculateToilExpiryDate: function (absenceTypeID, date, params) {\n        $log.debug('AbsenceTypeAPI.calculateToilExpiryDate');\n\n        params = _.assign({}, params, {\n          absence_type_id: absenceTypeID,\n          date: moment(date).format(sharedSettings.serverDateFormat)\n        });\n\n        return this.sendPOST('AbsenceType', 'calculateToilExpiryDate', params)\n          .then(function (data) {\n            return data.values.expiry_date;\n          });\n      }\n    });\n  }]);\n});\n\n//# sourceURL=/vagrant/hr1706/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/apis/absence-type.api.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/instances/absence-type.instance',[\n  'leave-absences/shared/modules/models-instances',\n  'common/models/instances/instance'\n], function (instances) {\n  'use strict';\n\n  instances.factory('AbsenceTypeInstance', ['$log', 'ModelInstance', function ($log, ModelInstance) {\n    $log.debug('AbsenceTypeInstance');\n\n    return ModelInstance.extend({});\n  }]);\n});\n\n//# sourceURL=/vagrant/hr1706/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/instances/absence-type.instance.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/models/absence-type.model',[\n  'common/lodash',\n  'leave-absences/shared/modules/models',\n  'common/models/model',\n  'common/models/option-group',\n  'leave-absences/shared/apis/absence-type.api',\n  'leave-absences/shared/instances/absence-type.instance'\n], function (_, models) {\n  'use strict';\n\n  models.factory('AbsenceType', [\n    '$log', '$q', 'Model', 'OptionGroup', 'AbsenceTypeAPI', 'AbsenceTypeInstance',\n    function ($log, $q, Model, OptionGroup, absenceTypeAPI, instance) {\n      $log.debug('AbsenceType');\n\n      return Model.extend({\n        /**\n         * Calls the all() method of the AbsenceType API, and returns an\n         * AbsenceTypeInstance for each absenceType. Also calls\n         * optionGroupAPI.valuesOf() to retrieve and set calculation units\n         *\n         * @param  {Object} params  matches the api endpoint params (title, weight etc)\n         * @return {Promise}\n         */\n        all: function (params) {\n          return absenceTypeAPI.all(params).then(function (absenceTypes) {\n            return absenceTypes.map(function (absenceType) {\n              return instance.init(absenceType, true);\n            });\n          });\n        },\n\n        /**\n         * Calls the calculateToilExpiryDate() method of the AbsenceType API\n         *\n         * @param  {string} absenceTypeID\n         * @param  {Object} date\n         * @param  {Object} params\n         * @return {Promise}\n         */\n        calculateToilExpiryDate: function (absenceTypeID, date, params) {\n          return absenceTypeAPI.calculateToilExpiryDate(absenceTypeID, date, params);\n        },\n\n        /**\n         * Determines if the absence type can expire by querying if\n         * the expiration unit and duration are not null.\n         *\n         * @param   {string} absenceTypeId\n         * @return  {Promise}\n         */\n        canExpire: function (absenceTypeId) {\n          return absenceTypeAPI.all({\n            accrual_expiration_unit: { 'IS NOT NULL': 1 },\n            accrual_expiration_duration: { 'IS NOT NULL': 1 },\n            allow_accruals_request: 1,\n            id: absenceTypeId,\n            options: { limit: 1 },\n            return: ['id']\n          })\n          .then(function (results) {\n            return results.length > 0;\n          });\n        },\n        /**\n         * Retrieves calculation units\n         * and sets units symbols to provided absence types accordingly\n         *\n         * Example: if a unit name is \"hours\", then the symbol will be \"h\"\n         *\n         * @param   {Array} absenceTypes array of absence types or their instances\n         * @return  {Promise} resolves with the input populated with calculation unit symbols\n         */\n        loadCalculationUnits: function (absenceTypes) {\n          return OptionGroup.valuesOf('hrleaveandabsences_absence_type_calculation_unit')\n            .then(function (calculationUnits) {\n              calculationUnits = _.indexBy(calculationUnits, 'value');\n\n              return _.map(absenceTypes, function (absenceType) {\n                return _.assign(absenceType, {\n                  calculation_unit_label: calculationUnits[absenceType.calculation_unit].label,\n                  calculation_unit_name: calculationUnits[absenceType.calculation_unit].name\n                });\n              });\n            });\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1706/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/models/absence-type.model.js"),eval("// Copyright CiviCRM LLC 2013. See http://civicrm.org/licensing\n(function ($, _) {\n\n    var gid = CRM.grID;\n    var joinDate = $('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(2) .crm-custom-data').html();\n    var finalDate =$('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(3) .crm-custom-data').html();\n\n    function extendMoment(){\n        var STRINGS = {\n            nodiff: '',\n            year: 'year',\n            years: 'years',\n            month: 'month',\n            months: 'months',\n            day: 'day',\n            days: 'days',\n            hour: 'hour',\n            hours: 'hours',\n            minute: 'minute',\n            minutes: 'minutes',\n            second: 'second',\n            seconds: 'seconds',\n            delimiter: ' '\n        };\n        moment.fn.preciseDiff = function(d2) {\n            return moment.preciseDiff(this, d2);\n        };\n        moment.preciseDiff = function(d1, d2) {\n            var m1 = moment(d1), m2 = moment(d2);\n            if (m1.isSame(m2)) {\n                return STRINGS.nodiff;\n            }\n            if (m1.isAfter(m2)) {\n                var tmp = m1;\n                m1 = m2;\n                m2 = tmp;\n            }\n\n            var yDiff = m2.year() - m1.year();\n            var mDiff = m2.month() - m1.month();\n            var dDiff = m2.date() - m1.date();\n//code commented to show only year,month and days on job summary\n            /*\n             var hourDiff = m2.hour() - m1.hour();\n             var minDiff = m2.minute() - m1.minute();\n             var secDiff = m2.second() - m1.second();\n\n             if (secDiff < 0) {\n             secDiff = 60 + secDiff;\n             minDiff--;\n             }\n             if (minDiff < 0) {\n             minDiff = 60 + minDiff;\n             hourDiff--;\n             }\n             if (hourDiff < 0) {\n             hourDiff = 24 + hourDiff;\n             dDiff--;\n             }\n             */\n            if (dDiff < 0) {\n                var daysInLastFullMonth = moment(m2.year() + '-' + (m2.month() + 1), \"YYYY-MM\").subtract('months', 1).daysInMonth();\n                if (daysInLastFullMonth < m1.date()) { // 31/01 -> 2/03\n                    dDiff = daysInLastFullMonth + dDiff + (m1.date() - daysInLastFullMonth);\n                } else {\n                    dDiff = daysInLastFullMonth + dDiff;\n                }\n                mDiff--;\n            }\n            if (mDiff < 0) {\n                mDiff = 12 + mDiff;\n                yDiff--;\n            }\n\n            function pluralize(num, word) {\n                return num + ' ' + STRINGS[word + (num === 1 ? '' : 's')];\n            }\n            var result = [];\n\n            if (yDiff) {\n                result.push(pluralize(yDiff, 'year'));\n            }\n            if (mDiff) {\n                if (yDiff) {\n                    result.push(','); //HR-350\n                }\n                result.push(pluralize(mDiff, 'month'));\n            }\n            if (dDiff) {\n                if (mDiff) {\n                    result.push('and'); //HR-350\n                }\n                result.push(pluralize(dDiff, 'day'));\n            }\n//code commented to show only year,month and days on job summary\n            /*\n             if (hourDiff) {\n             result.push(pluralize(hourDiff, 'hour'));\n             }\n             if (minDiff) {\n             result.push(pluralize(minDiff, 'minute'));\n             }\n             if (secDiff) {\n             result.push(pluralize(secDiff, 'second'));\n             }\n             */\n            return result.join(STRINGS.delimiter);\n        };\n    };\n\n    function lengthEmployment(joinDate,finalDate,gid) {\n\n        if (!moment.preciseDiff){\n            extendMoment();\n        }\n\n        var join_date = moment(joinDate,\"MMMM DD, YYYY\");\n        var duration = '';\n        if(finalDate) {\n            var final_date = moment(finalDate,\"MMMM DD, YYYY\");\n        }\n        var now = moment();\n        if (finalDate) {\n            var diff =  final_date.diff(now, 'days');\n        }\n        else {\n            var diff =  now.diff(join_date, 'days');\n        }\n        if (diff < 0 ) {\n            duration = moment.preciseDiff(join_date,final_date);\n        }\n        else {\n            duration = moment().preciseDiff(join_date);\n        }\n        var diffDate =  now.diff(join_date, 'days');\n        if (diffDate <= 0 ) {\n            duration = '0 days';\n        }\n\n        $('#initial_join_date').remove();\n        var length = \"<div class='crm-summary-row' id='initial_join_date'><div class='crm-label'>Length Of Employment</div><div class='crm-content crm-custom-data lengthEmployment'></div></div>\";\n        $('#custom-set-content-'+gid+' .crm-inline-block-content').append(length);\n        $('.lengthEmployment').html(duration);\n        if (finalDate && (diff < 0)) {\n            $('.lengthEmployment').css({'color':'#FF0000'});\n        }\n    }\n\n    if (joinDate) {\n      lengthEmployment(joinDate,finalDate,gid);\n    }\n\n    $(document).on(\"click\", \"#_qf_CustomData_upload\", function() {\n      $(document).ajaxSuccess(function(data, textStatus, jqXHR) {\n        if(jqXHR.extraData) {\n          if (jqXHR.extraData.class_name == 'CRM_Contact_Form_Inline_CustomData' && jqXHR.extraData.groupID == gid) {\n            setTimeout(function(){\n\t      var joinDate = $('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(2) .crm-custom-data').html();\n\t      var finalDate =$('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(3) .crm-custom-data').html();\n\t      if (joinDate) {\n                lengthEmployment(joinDate,finalDate,gid);\n\t      }\n            },300 );\n          }\n        }\n      });\n    });\n\n}(CRM.$, CRM._));\n\n//# sourceURL=/job-contract/vendor/jobsummary.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.core',[\n  'common/angular',\n  'common/ui-select',\n  'common/directives/angular-date/date-input',\n  'common/filters/angular-date/format-date',\n  'common/filters/time-unit-applier.filter',\n  'common/modules/routers/compu-ng-route',\n  'common/modules/directives',\n  'common/services/dom-event-trigger',\n  'common/services/pub-sub',\n  'common/services/angular-date/date-format',\n  'leave-absences/shared/models/absence-type.model',\n  'job-contract/vendor/fraction',\n  'job-contract/vendor/job-summary'\n], function (angular) {\n  'use strict';\n\n  angular.module('job-contract.core', [\n    'ngAnimate',\n    'compuNgRoute',\n    'ngResource',\n    'angularFileUpload',\n    'ui.bootstrap',\n    'ui.select',\n    'common.angularDate',\n    'common.services',\n    'common.directives',\n    'common.filters',\n    'leave-absences.models'\n  ]);\n});\n\n//# sourceURL=/job-contract/modules/job-contract.core.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/directives/contact.directive',[],function () {\n  'use strict';\n\n  hrjcContact.__name = 'hrjcContact';\n  hrjcContact.$inject = ['$compile', '$log', 'settings', 'contactService'];\n\n  function hrjcContact ($compile, $log, settings, contactService) {\n    $log.debug('Directive: hrjcContact');\n\n    return {\n      restrict: 'A',\n      scope: {\n        renderAsLink: '=?hrjcContactLink',\n        contactId: '=?hrjcContact'\n      },\n      template: '{{contact.label}}',\n      link: function ($scope, el) {\n        if (!$scope.contactId) {\n          return;\n        }\n\n        $scope.$watch('contactId', function (contactId) {\n          contactService.getOne($scope.contactId).then(function (contact) {\n            $scope.contact = contact;\n\n            if ($scope.renderAsLink) {\n              el.html('<a ng-href=\"/civicrm/contact/view?reset=1&cid={{contactId}}\">{{contact.label}}</a>');\n              $compile(el.contents())($scope);\n            }\n          });\n        });\n      }\n    };\n  }\n\n  return hrjcContact;\n});\n\n//# sourceURL=/job-contract/directives/contact.directive.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/directives/loader.directive',[],function () {\n  'use strict';\n\n  hrjcLoader.__name = 'hrjcLoader';\n  hrjcLoader.$inject = ['$log', '$rootScope'];\n\n  function hrjcLoader ($log, $rootScope) {\n    $log.debug('Directive: hrjcLoader');\n\n    return {\n      link: function ($scope, el, attrs) {\n        var loader = document.createElement('div');\n        var loaderSet = false;\n        var positionSet = false;\n\n        loader.className = 'hrjc-loader';\n\n        function isPositioned () {\n          var elPosition = window.getComputedStyle(el[0]).position;\n          return elPosition === 'relative' || elPosition === 'absolute' || elPosition === 'fixed';\n        }\n\n        function appendLoader () {\n          if (!isPositioned()) {\n            el.css('position', 'relative');\n            positionSet = true;\n          }\n\n          el.append(loader);\n          loaderSet = true;\n        }\n\n        function removeLoader () {\n          loaderSet && loader.parentNode.removeChild(loader);\n          loaderSet = false;\n\n          if (positionSet) {\n            el.css('position', '');\n          }\n        }\n\n        if (attrs.hrjcLoaderShow) {\n          appendLoader();\n        }\n\n        $scope.$on('hrjc-loader-show', function () {\n          appendLoader();\n        });\n\n        $scope.$on('hrjc-loader-hide', function () {\n          removeLoader();\n        });\n      }\n    };\n  }\n\n  return hrjcLoader;\n});\n\n//# sourceURL=/job-contract/directives/loader.directive.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/directives/number.directive',[],function () {\n  'use strict';\n\n  hrjcNumber.__name = 'hrjcNumber';\n  hrjcNumber.$inject = ['$log'];\n\n  function hrjcNumber ($log) {\n    $log.debug('Directive: hrjcNumber');\n\n    return {\n      require: 'ngModel',\n      link: function ($scope, el, attrs, modelCtrl) {\n        var toFixedVal = 2;\n        var notToFixed = attrs.hrjcNumberFloat || false;\n        // in Leave in Hours we break hours to 15 minutes intervals (0.25 of an hour)\n        var toHoursRound = 0.25;\n        var toHours = attrs.hrjcToHours || false;\n        var notNegative = attrs.hrjcNotNegative || false;\n\n        if (attrs.hrjcNumber && typeof +attrs.hrjcNumber === 'number') {\n          toFixedVal = attrs.hrjcNumber;\n        }\n\n        el.bind('blur', function () {\n          var viewVal = parseFloat(modelCtrl.$viewValue) || 0;\n\n          if (notNegative && viewVal < 0) {\n            viewVal = 0;\n          }\n\n          if (toHours) {\n            viewVal = Math.ceil(viewVal / toHoursRound) * toHoursRound;\n          }\n\n          modelCtrl.$setViewValue(!notToFixed ? viewVal.toFixed(toFixedVal) : Math.round(viewVal * 100) / 100);\n          modelCtrl.$render();\n        });\n      }\n    };\n  }\n\n  return hrjcNumber;\n});\n\n//# sourceURL=/job-contract/directives/number.directive.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/directives/validate.directive',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  hrjcValidate.__name = 'hrjcValidate';\n  hrjcValidate.$inject = ['$log'];\n\n  function hrjcValidate ($log) {\n    $log.debug('Directive: hrjcValidate');\n\n    return {\n      restrict: 'A',\n      require: '^form',\n      scope: {\n        isWarning: '=?hrjcValidateWarning'\n      },\n      link: function ($scope, el, attrs, formCtrl) {\n        var inputEl = el[0].querySelector('[name]');\n        var inputNgEl = angular.element(inputEl);\n        var inputName = inputNgEl.attr('name');\n        var iconEl = document.createElement('span');\n        var iconNgEl = angular.element(iconEl);\n\n        if (!inputName) {\n          return;\n        }\n\n        el.addClass('has-feedback');\n        iconNgEl.addClass('glyphicon form-control-feedback');\n        inputNgEl.after(iconNgEl);\n\n        function toggleSuccess (invalid, isWarning) {\n          el.toggleClass('has-success', !invalid && !isWarning);\n          iconNgEl.toggleClass('glyphicon-ok', !invalid && !isWarning);\n        }\n\n        function toggleWarning (invalid, isWarning) {\n          el.toggleClass('has-warning', !invalid && isWarning);\n          iconNgEl.toggleClass('glyphicon-warning-sign', !invalid && isWarning);\n        }\n\n        function toggleError (invalid) {\n          el.toggleClass('has-error', invalid);\n          iconNgEl.toggleClass('glyphicon-remove', invalid);\n        }\n\n        $scope.$watch(function () {\n          return formCtrl[inputName] && formCtrl[inputName].$invalid;\n        }, function (invalid) {\n          if (formCtrl[inputName].$dirty) {\n            toggleSuccess(invalid, $scope.isWarning);\n            toggleError(invalid);\n          }\n        });\n\n        if (typeof $scope.isWarning !== 'undefined') {\n          $scope.$watch('isWarning', function (isWarning) {\n            var invalid = formCtrl[inputName].$invalid;\n            if (formCtrl[inputName].$dirty) {\n              toggleSuccess(invalid, isWarning);\n              toggleWarning(invalid, isWarning);\n            }\n          });\n        }\n\n        inputNgEl.bind('blur', function () {\n          toggleError(formCtrl[inputName].$invalid);\n        });\n      }\n    };\n  }\n\n  return hrjcValidate;\n});\n\n//# sourceURL=/job-contract/directives/validate.directive.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.directives',[\n  'common/angular',\n  'job-contract/directives/contact.directive',\n  'job-contract/directives/loader.directive',\n  'job-contract/directives/number.directive',\n  'job-contract/directives/validate.directive'\n], function (angular, hrjcContact, hrjcLoader, hrjcNumber, hrjcValidate) {\n  'use strict';\n\n  return angular.module('job-contract.directives', [])\n    .directive(hrjcContact.__name, hrjcContact)\n    .directive(hrjcLoader.__name, hrjcLoader)\n    .directive(hrjcNumber.__name, hrjcNumber)\n    .directive(hrjcValidate.__name, hrjcValidate);\n});\n\n//# sourceURL=/job-contract/modules/job-contract.directives.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/filters/capitalize.filter',[],function () {\n  'use strict';\n\n  capitalize.__name = 'capitalize';\n  capitalize.$inject = ['$log'];\n\n  function capitalize ($log) {\n    $log.debug('Filter: capitalize');\n\n    return function (input) {\n      return (input) ? input.replace(/([^\\W_]+[^\\s-]*) */g, function (txt) { return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(); }) : '';\n    };\n  }\n\n  return capitalize;\n});\n\n//# sourceURL=/job-contract/filters/capitalize.filter.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/filters/format-amount.filter',[],function () {\n  'use strict';\n\n  formatAmount.__name = 'formatAmount';\n  formatAmount.$inject = ['$log'];\n\n  function formatAmount ($log) {\n    $log.debug('Filter: formatAmount');\n\n    return function (input) {\n      return input && input.indexOf('.') === -1 ? input + '.00' : input;\n    };\n  }\n\n  return formatAmount;\n});\n\n//# sourceURL=/job-contract/filters/format-amount.filter.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/filters/format-period.filter',[],function () {\n  'use strict';\n\n  formatPeriod.__name = 'formatPeriod';\n  formatPeriod.$inject = ['$filter', '$log'];\n\n  function formatPeriod ($filter, $log) {\n    $log.debug('Filter: formatPeriod');\n\n    return function (period) {\n      return period ? $filter('date')(period, 'yyyy/MM/dd') : 'Unspecified';\n    };\n  }\n\n  return formatPeriod;\n});\n\n//# sourceURL=/job-contract/filters/format-period.filter.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/filters/get-obj-by-id.filter',[],function () {\n  'use strict';\n\n  getObjById.__name = 'getObjById';\n  getObjById.$inject = ['$log'];\n\n  function getObjById ($log) {\n    $log.debug('Filter: getObjById');\n\n    return function (input, id, key) {\n      if (!input) {\n        return null;\n      }\n\n      var i = 0;\n      var len = input.length;\n\n      for (; i < len; i++) {\n        if (+input[i].id === +id) {\n          return !key ? input[i] : input[i][key];\n        }\n      }\n      return null;\n    };\n  }\n\n  return getObjById;\n});\n\n//# sourceURL=/job-contract/filters/get-obj-by-id.filter.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/filters/parse-integer.filter',[],function () {\n  'use strict';\n\n  parseInteger.__name = 'parseInteger';\n  parseInteger.$inject = ['$log'];\n\n  function parseInteger ($log) {\n    $log.debug('Filter: parseInteger');\n\n    return function (input) {\n      return input ? parseInt(input) : null;\n    };\n  }\n\n  return parseInteger;\n});\n\n//# sourceURL=/job-contract/filters/parse-integer.filter.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.filters',[\n  'common/angular',\n  'job-contract/filters/capitalize.filter',\n  'job-contract/filters/format-amount.filter',\n  'job-contract/filters/format-period.filter',\n  'job-contract/filters/get-obj-by-id.filter',\n  'job-contract/filters/parse-integer.filter'\n], function (angular, capitalize, formatAmount, formatPeriod, getObjById, parseInteger) {\n  'use strict';\n\n  return angular.module('job-contract.filters', [])\n    .filter(capitalize.__name, capitalize)\n    .filter(formatAmount.__name, formatAmount)\n    .filter(formatPeriod.__name, formatPeriod)\n    .filter(getObjById.__name, getObjById)\n    .filter(parseInteger.__name, parseInteger);\n});\n\n//# sourceURL=/job-contract/modules/job-contract.filters.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.run',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('job-contract.run', ['job-contract.constants']).run(run);\n\n  run.$inject = [\n    '$log', '$q', '$rootScope', 'settings', 'contractService', 'contractDetailsService',\n    'contractHourService', 'contractPayService', 'contractLeaveService',\n    'contractHealthService', 'contractPensionService'\n  ];\n\n  function run ($log, $q, $rootScope, settings, contractService, contractDetailsService,\n    contractHourService, contractPayService, contractLeaveService, contractHealthService,\n    contractPensionService) {\n    $log.debug('app.run');\n\n    $rootScope.pathTpl = settings.pathTpl;\n    $rootScope.prefix = settings.classNamePrefix;\n\n    $q.all({\n      contract: contractService.getRevisionOptions(),\n      details: contractDetailsService.getOptions(),\n      hour: contractHourService.getOptions(),\n      pay: contractPayService.getOptions(),\n      leave: contractLeaveService.getOptions(),\n      health: contractHealthService.getOptions(),\n      pension: contractPensionService.getOptions()\n    })\n    .then(function (results) {\n      results.pay.pay_is_auto_est = ['No', 'Yes'];\n      results.pension.is_enrolled = ['No', 'Yes', 'Opted out'];\n\n      $log.debug('OPTIONS:');\n      $log.debug(results);\n      $rootScope.options = results;\n    });\n  }\n});\n\n//# sourceURL=/job-contract/modules/job-contract.run.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/api.service',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  apiService.__name = 'apiService';\n  apiService.$inject = ['$resource', '$q', 'settings', '$log'];\n\n  function apiService ($resource, $q, settings, $log) {\n    $log.debug('Service: apiService');\n\n    return {\n      resource: function (entity, action, json) {\n        if ((!entity || typeof entity !== 'string') ||\n          (!action || typeof action !== 'string') ||\n          (json && typeof json !== 'object')) {\n          return null;\n        }\n\n        return $resource(settings.pathRest, {\n          action: action,\n          entity: entity,\n          json: json\n        });\n      },\n      getOne: function (entity, params) {\n        if ((!entity || typeof entity !== 'string') ||\n          (params && typeof params !== 'object')) {\n          return null;\n        }\n\n        var deffered = $q.defer();\n        var json = angular.extend({\n          sequential: 1\n        }, params);\n        var val;\n\n        this.resource(entity, 'get', json).get(function (data) {\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        }, function () {\n          deffered.reject('Unable to fetch data');\n        });\n\n        return deffered.promise;\n      },\n      get: function (entity, params) {\n        if ((!entity || typeof entity !== 'string') ||\n          (params && typeof params !== 'object')) {\n          return null;\n        }\n\n        var deffered = $q.defer();\n        var json = angular.extend({\n          sequential: 1\n        }, params);\n\n        this.resource(entity, 'get', json).get(function (data) {\n          deffered.resolve(data.values);\n        }, function () {\n          deffered.reject('Unable to fetch data');\n        });\n\n        return deffered.promise;\n      }\n    };\n  }\n\n  return apiService;\n});\n\n//# sourceURL=/job-contract/services/api.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contact.service',[],function () {\n  'use strict';\n\n  contactService.__name = 'contactService';\n  contactService.$inject = ['$resource', 'settings', '$q', 'utilsService', '$log'];\n\n  function contactService ($resource, settings, $q, utilsService, $log) {\n    $log.debug('Service: contactService');\n\n    var Contact = $resource(settings.pathRest, {\n      action: 'getlist',\n      entity: 'contact',\n      json: {}\n    });\n\n    return {\n      getOne: function (id) {\n        if (!id || typeof +id !== 'number') {\n          return null;\n        }\n\n        var val;\n        var deffered = $q.defer();\n\n        Contact.get({json: {\n          id: id,\n          debug: settings.debug\n        }}, function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contact', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        }, function () {\n          deffered.reject('Unable to fetch contact');\n        });\n\n        return deffered.promise;\n      },\n      search: function (input, params) {\n        if ((!input || typeof input === 'undefined') ||\n          (params && typeof params !== 'object')) {\n          return null;\n        }\n\n        var deffered = $q.defer();\n\n        params = params || {};\n\n        Contact.get({json: {\n          input: input,\n          params: params,\n          debug: settings.debug\n        }}, function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contact list', deffered)) {\n            return;\n          }\n\n          deffered.resolve(data.values);\n        }, function () {\n          deffered.reject('Unable to fetch contact list');\n        });\n\n        return deffered.promise;\n      }\n    };\n  }\n\n  return contactService;\n});\n\n//# sourceURL=/job-contract/services/contact.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract.service',[],function () {\n  'use strict';\n\n  Contract.__name = 'Contract';\n  Contract.$inject = ['$resource', 'settings', '$log'];\n\n  function Contract ($resource, settings, $log) {\n    $log.debug('Service: Contract');\n\n    return $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobContract',\n      json: {}\n    });\n  }\n\n  return Contract;\n});\n\n//# sourceURL=/job-contract/services/contract.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-details.service',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  contractDetailsService.__name = 'contractDetailsService';\n  contractDetailsService.$inject = ['$filter', '$resource', 'settings', '$q', 'utilsService', '$log'];\n\n  function contractDetailsService ($filter, $resource, settings, $q, utilsService, $log) {\n    $log.debug('Service: contractDetailsService');\n\n    var ContractDetails = $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobDetails',\n      json: {}\n    });\n\n    return {\n      validateDates: function (params) {\n        if ((!params || typeof params !== 'object') ||\n          (!params.contact_id) ||\n          (!params.period_start_date)) {\n          return null;\n        }\n\n        params.period_start_date = convertToDateString(params.period_start_date);\n        params.period_end_date = convertToDateString(params.period_end_date);\n\n        params.sequential = 0;\n        params.debug = settings.debug;\n\n        var deffered = $q.defer();\n        var val;\n\n        ContractDetails.save({\n          action: 'validatedates',\n          json: params\n        },\n          null,\n          function (data) {\n            if (utilsService.errorHandler(data, 'Unable to fetch API \"validatedates\" response', deffered)) {\n              return;\n            }\n\n            val = data.values;\n            deffered.resolve(val);\n          });\n        return deffered.promise;\n      },\n      getOne: function (params) {\n        if ((!params || typeof params !== 'object') ||\n          (!params.jobcontract_id && !params.jobcontract_revision_id) ||\n          (params.jobcontract_id && typeof +params.jobcontract_id !== 'number') ||\n          (params.jobcontract_revision_id && typeof +params.jobcontract_revision_id !== 'number')) {\n          return null;\n        }\n\n        params.sequential = 1;\n        params.debug = settings.debug;\n\n        var deffered = $q.defer();\n        var val;\n\n        ContractDetails.get({\n          json: params\n        }, function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contract details', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to fetch contract details');\n        });\n\n        return deffered.promise;\n      },\n      getOptions: function (fieldName, callAPI) {\n        var deffered = $q.defer();\n        var data;\n\n        if (!callAPI) {\n          data = settings.CRM.options.HRJobDetails || {};\n\n          if (fieldName && typeof fieldName === 'string') {\n            data = data[fieldName];\n          }\n\n          deffered.resolve(data || {});\n        } else {\n          // TODO call2API\n        }\n\n        return deffered.promise;\n      },\n      getFields: function (params) {\n        if (params && typeof params !== 'object') {\n          return null;\n        }\n\n        if (!params || typeof params !== 'object') {\n          params = {};\n        }\n\n        var deffered = $q.defer();\n        var crmFields = settings.CRM.fields;\n\n        if (crmFields && crmFields.HRJobDetails) {\n          deffered.resolve(crmFields.HRJobDetails);\n        } else {\n          params.sequential = 1;\n\n          ContractDetails.get({\n            action: 'getfields',\n            json: params\n          },\n          function (data) {\n            if (!data.values) {\n              deffered.reject('Unable to fetch contract details fields');\n            }\n\n            deffered.resolve(data.values);\n          }, function () {\n            deffered.reject('Unable to fetch contract details fields');\n          });\n        }\n\n        return deffered.promise;\n      },\n      save: function (contractDetails) {\n        if (!contractDetails || typeof contractDetails !== 'object') {\n          return null;\n        }\n\n        contractDetails.period_start_date = convertToDateString(contractDetails.period_start_date);\n        contractDetails.period_end_date = convertToDateString(contractDetails.period_end_date);\n\n        var deffered = $q.defer();\n        var params = angular.extend({\n          sequential: 1,\n          debug: settings.debug\n        }, contractDetails);\n        var val;\n\n        ContractDetails.save({\n          action: 'create',\n          json: params\n        },\n        null,\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to create contract details', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to create contract details');\n        });\n\n        return deffered.promise;\n      },\n      model: function (fields) {\n        var deffered = $q.defer();\n\n        function createModel (fields) {\n          var i = 0;\n          var len = fields.length;\n          var model = {};\n\n          for (i; i < len; i++) {\n            model[fields[i].name] = '';\n          }\n\n          if (typeof model.id !== 'undefined') {\n            model.id = null;\n          }\n\n          if (typeof model.jobcontract_revision_id !== 'undefined') {\n            model.jobcontract_revision_id = null;\n          }\n\n          if (typeof model.location !== 'undefined') {\n            model.location = null;\n          }\n\n          return model;\n        }\n\n        if (fields) {\n          deffered.resolve(createModel(fields));\n        } else {\n          this.getFields().then(function (fields) {\n            deffered.resolve(createModel(fields));\n          });\n        }\n\n        return deffered.promise;\n      }\n    };\n\n    /**\n     * If parameter passed is a Date object, it converts it into a string\n     *\n     * @param {Date} dateObj\n     * @param {string/any}\n     */\n    function convertToDateString (dateObj) {\n      var dateString = $filter('formatDate')(dateObj, 'YYYY-MM-DD');\n\n      return dateString !== 'Unspecified' ? dateString : dateObj;\n    }\n  }\n\n  return contractDetailsService;\n});\n\n//# sourceURL=/job-contract/services/contract-details.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-files.service',[],function () {\n  'use strict';\n\n  contractFilesService.__name = 'contractFilesService';\n  contractFilesService.$inject = [\n    '$resource', 'settings', '$q', 'utilsService', 'FileUploader', '$log'\n  ];\n\n  function contractFilesService ($resource, settings, $q, utilsService, FileUploader, $log) {\n    $log.debug('Service: contractFilesService');\n\n    var ContractFiles = $resource(settings.pathFile + ':action');\n    FileUploader.prototype.queueDelete = [];\n\n    return {\n      delete: function (fileId, entityId, entityTable) {\n        if ((!fileId || typeof +fileId !== 'number') ||\n          (!entityId || typeof +entityId !== 'number') ||\n          (!entityTable || typeof entityTable !== 'string')) {\n          return null;\n        }\n\n        var deffered = $q.defer();\n\n        ContractFiles.save({\n          action: 'delete',\n          entityTable: entityTable,\n          entityID: entityId,\n          fileID: fileId\n        },\n        null,\n        function (data) {\n          if (data.values && !+data.values[0].result) {\n            data.is_error = 1;\n          }\n\n          if (utilsService.errorHandler(data, 'Unable to delete file', deffered)) {\n            return;\n          }\n\n          deffered.resolve(data.values[0]);\n        },\n        function () {\n          deffered.reject('Unable to delete file');\n        });\n\n        return deffered.promise;\n      },\n      get: function (entityId, entityTable) {\n        if ((!entityId || typeof +entityId !== 'number') ||\n          (!entityTable || typeof entityTable !== 'string')) {\n          return null;\n        }\n\n        var deffered = $q.defer();\n\n        ContractFiles.get({\n          action: 'list',\n          entityTable: entityTable,\n          entityID: entityId\n        },\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch files', deffered)) {\n            return;\n          }\n\n          deffered.resolve(data.values);\n        },\n        function () {\n          deffered.reject('Unable to fetch files');\n        });\n\n        return deffered.promise;\n      },\n      uploader: function (entityTable, queueLimit) {\n        if (!entityTable || typeof entityTable !== 'string') {\n          return null;\n        }\n\n        var uploaderSettings = {\n          url: settings.pathFile + 'upload',\n          formData: [{\n            entityTable: entityTable\n          }]\n        };\n\n        if (queueLimit && typeof queueLimit === 'number') {\n          uploaderSettings.queueLimit = queueLimit;\n        }\n\n        return new FileUploader(uploaderSettings);\n      },\n      upload: function (uploaderInstance, revisionId) {\n        if (!uploaderInstance || typeof uploaderInstance !== 'object' ||\n          !revisionId || typeof +revisionId !== 'number') {\n          return null;\n        }\n\n        var deffered = $q.defer();\n        var results = [];\n\n        uploaderInstance.onBeforeUploadItem = function (item) {\n          item.formData.push({\n            entityID: revisionId\n          });\n        };\n\n        uploaderInstance.onCompleteItem = function (item, response) {\n          results.push(response);\n        };\n\n        uploaderInstance.onErrorItem = function (item, response, status, headers) {\n          deffered.reject('Could not upload file: ' + item.file.name);\n          $log.error(' ===== Item Error: ' + status + ' ======');\n          $log.error(' =====  - item ======');\n          $log.error(item);\n          $log.error(' =====  - response ======');\n          $log.error(response);\n          $log.error(' =====  - headers ======');\n          $log.error(headers);\n        };\n\n        uploaderInstance.onCompleteAll = function () {\n          deffered.resolve(results);\n        };\n\n        uploaderInstance.uploadAll();\n\n        return deffered.promise;\n      }\n    };\n  }\n\n  return contractFilesService;\n});\n\n//# sourceURL=/job-contract/services/contract-files.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-health.service',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  contractHealthService.__name = 'contractHealthService';\n  contractHealthService.$inject = [\n    '$resource', 'settings', '$q', 'utilsService', '$log'\n  ];\n\n  function contractHealthService ($resource, settings, $q, utilsService, $log) {\n    $log.debug('Service: contractHealthService');\n\n    var ContractHealth = $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobHealth',\n      json: {}\n    });\n\n    return {\n      getOne: function (params) {\n        if ((!params || typeof params !== 'object') ||\n          (!params.jobcontract_revision_id) ||\n          (params.jobcontract_revision_id && typeof +params.jobcontract_revision_id !== 'number')) {\n          return null;\n        }\n\n        params.sequential = 1;\n        params.debug = settings.debug;\n\n        var deffered = $q.defer();\n        var val;\n\n        ContractHealth.get({\n          json: params\n        },\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contract Health', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to fetch contract Health');\n        });\n\n        return deffered.promise;\n      },\n      getOptions: function (fieldName, callAPI) {\n        var deffered = $q.defer();\n        var params = {};\n        var data;\n\n        if (!callAPI) {\n          data = settings.CRM.options.HRJobHealth || {};\n\n          if (fieldName && typeof fieldName === 'string') {\n            data = data[fieldName];\n          }\n\n          deffered.resolve(data || {});\n        } else {\n          params.sequential = 1;\n\n          if (fieldName && typeof fieldName === 'string') {\n            params.field = fieldName;\n          }\n\n          ContractHealth.get({\n            action: 'getoptions',\n            json: params\n          },\n          function (data) {\n            if (!data.values) {\n              deffered.reject('Unable to fetch contract insurance options');\n            }\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to fetch contract insurance options');\n          });\n        }\n\n        return deffered.promise;\n      },\n      getFields: function (params) {\n        if (params && typeof params !== 'object') {\n          return null;\n        }\n\n        if (!params || typeof params !== 'object') {\n          params = {};\n        }\n\n        var deffered = $q.defer();\n        var crmFields = settings.CRM.fields;\n\n        if (crmFields && crmFields.HRJobHealth) {\n          deffered.resolve(crmFields.HRJobHealth);\n        } else {\n          params.sequential = 1;\n\n          ContractHealth.get({\n            action: 'getfields',\n            json: params\n          },\n          function (data) {\n            if (!data.values) {\n              deffered.reject('Unable to fetch contract insurance fields');\n            }\n\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to fetch contract insurance fields');\n          });\n        }\n\n        return deffered.promise;\n      },\n      save: function (contractHealth) {\n        if (!contractHealth || typeof contractHealth !== 'object') {\n          return null;\n        }\n\n        var deffered = $q.defer();\n        var params = angular.extend({\n          sequential: 1,\n          debug: settings.debug\n        }, contractHealth);\n        var val;\n\n        ContractHealth.save({\n          action: 'create',\n          json: params\n        },\n        null,\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to create contract insurance', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to create contract insurance');\n        });\n\n        return deffered.promise;\n      },\n      model: function (fields) {\n        var deffered = $q.defer();\n\n        function createModel (fields) {\n          var i = 0;\n          var len = fields.length;\n          var model = {};\n\n          for (i; i < len; i++) {\n            model[fields[i].name] = '';\n          }\n\n          if (typeof model.id !== 'undefined') {\n            model.id = null;\n          }\n\n          if (typeof model.jobcontract_revision_id !== 'undefined') {\n            model.jobcontract_revision_id = null;\n          }\n\n          return model;\n        }\n\n        if (fields) {\n          deffered.resolve(createModel(fields));\n        } else {\n          this.getFields().then(function (fields) {\n            deffered.resolve(createModel(fields));\n          });\n        }\n\n        return deffered.promise;\n      }\n    };\n  }\n\n  return contractHealthService;\n});\n\n//# sourceURL=/job-contract/services/contract-health.service.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-hour.service',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  contractHourService.__name = 'contractHourService';\n  contractHourService.$inject = [\n    '$resource', 'settings', '$q', 'utilsService', '$log'\n  ];\n\n  function contractHourService ($resource, settings, $q, utilsService, $log) {\n    $log.debug('Service: contractHourService');\n\n    var ContractHour = $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobHour',\n      json: {}\n    });\n\n    return {\n      getOne: function (params) {\n        if ((!params || typeof params !== 'object') ||\n          (!params.jobcontract_revision_id) ||\n          (params.jobcontract_revision_id && typeof +params.jobcontract_revision_id !== 'number')) {\n          return null;\n        }\n\n        params.sequential = 1;\n        params.debug = settings.debug;\n\n        var deffered = $q.defer();\n        var val;\n\n        ContractHour.get({\n          json: params\n        },\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contract hours', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to fetch contract hours');\n        });\n\n        return deffered.promise;\n      },\n      getOptions: function (fieldName, callAPI) {\n        var deffered = $q.defer();\n        var data;\n\n        if (!callAPI) {\n          data = settings.CRM.options.HRJobHour || {};\n\n          if (fieldName && typeof fieldName === 'string') {\n            data = data[fieldName];\n          }\n\n          deffered.resolve(data || {});\n        } else {\n          // TODO call2API\n        }\n\n        return deffered.promise;\n      },\n      getFields: function (params) {\n        if (params && typeof params !== 'object') {\n          return null;\n        }\n\n        if (!params || typeof params !== 'object') {\n          params = {};\n        }\n\n        var deffered = $q.defer();\n        var crmFields = settings.CRM.fields;\n\n        if (crmFields && crmFields.HRJobHour) {\n          deffered.resolve(crmFields.HRJobHour);\n        } else {\n          params.sequential = 1;\n\n          ContractHour.get({\n            action: 'getfields',\n            json: params\n          },\n          function (data) {\n            if (!data.values) {\n              deffered.reject('Unable to fetch contract hours fields');\n            }\n\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to fetch contract hours fields');\n          });\n        }\n\n        return deffered.promise;\n      },\n      save: function (contractHour) {\n        if (!contractHour || typeof contractHour !== 'object') {\n          return null;\n        }\n\n        var deffered = $q.defer();\n        var params = angular.extend({\n          sequential: 1,\n          debug: settings.debug\n        }, contractHour);\n        var val;\n\n        ContractHour.save({\n          action: 'create',\n          json: params\n        },\n        null,\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to create contract hours', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to create contract hours');\n        });\n\n        return deffered.promise;\n      },\n      model: function (fields) {\n        var deffered = $q.defer();\n\n        function createModel (fields) {\n          var i = 0;\n          var len = fields.length;\n          var model = {};\n\n          for (i; i < len; i++) {\n            model[fields[i].name] = '';\n          }\n\n          if (typeof model.id !== 'undefined') {\n            model.id = null;\n          }\n\n          if (typeof model.jobcontract_revision_id !== 'undefined') {\n            model.jobcontract_revision_id = null;\n          }\n\n          return model;\n        }\n\n        if (fields) {\n          deffered.resolve(createModel(fields));\n        } else {\n          this.getFields().then(function (fields) {\n            deffered.resolve(createModel(fields));\n          });\n        }\n\n        return deffered.promise;\n      }\n    };\n  }\n\n  return contractHourService;\n});\n\n//# sourceURL=/job-contract/services/contract-hour.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-leave.service',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  contractLeaveService.__name = 'contractLeaveService';\n  contractLeaveService.$inject = [\n    '$resource', '$q', 'settings', 'utilsService', '$log', 'AbsenceType'\n  ];\n\n  function contractLeaveService ($resource, $q, settings, utilsService, $log, AbsenceType) {\n    $log.debug('Service: contractLeaveService');\n\n    var ContractLeave = $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobLeave',\n      json: {}\n    });\n\n    return {\n      getOne: function (params) {\n        var deffered = $q.defer();\n\n        if ((!params || typeof params !== 'object') ||\n          (!params.jobcontract_revision_id) ||\n          (params.jobcontract_revision_id && typeof +params.jobcontract_revision_id !== 'number') ||\n          (params.id && typeof +params.id !== 'number') ||\n          (params.leaveType && typeof +params.leaveType !== 'number')) {\n          return null;\n        }\n\n        params.sequential = 1;\n        params.debug = settings.debug;\n\n        ContractLeave.get({\n          json: params\n        },\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contract leave', deffered)) {\n            return;\n          }\n\n          adjustAddPublicHolidaysValue(data.values);\n\n          deffered.resolve(data.values);\n        },\n        function () {\n          deffered.reject('Unable to fetch contract leave');\n        });\n\n        return deffered.promise;\n      },\n      getOptions: function (fieldName, callAPI) {\n        var data;\n        var deffered = $q.defer();\n\n        if (!callAPI) {\n          data = settings.CRM.options.HRJobLeave || {};\n\n          if (fieldName && typeof fieldName === 'string') {\n            data = data[fieldName];\n          }\n\n          deffered.resolve(data || {});\n        } else {\n          // TODO call2API\n        }\n\n        return deffered.promise;\n      },\n      getFields: function (params) {\n        var deffered = $q.defer();\n        var crmFields = settings.CRM.fields;\n\n        if (params && typeof params !== 'object') {\n          return null;\n        }\n\n        if (!params || typeof params !== 'object') {\n          params = {};\n        }\n\n        if (crmFields && crmFields.HRJobLeave) {\n          deffered.resolve(crmFields.HRJobLeave);\n        } else {\n          params.sequential = 1;\n\n          ContractLeave.get({\n            action: 'getfields',\n            json: params\n          },\n          function (data) {\n            if (!data.values) {\n              deffered.reject('Unable to fetch contract leave fields');\n            }\n\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to fetch contract leave fields');\n          });\n        }\n\n        return deffered.promise;\n      },\n      save: function (contractLeave) {\n        var deffered = $q.defer();\n        var params = {\n          sequential: 1,\n          values: contractLeave,\n          debug: settings.debug\n        };\n\n        if (!contractLeave || typeof contractLeave !== 'object') {\n          return null;\n        }\n\n        ContractLeave.save({\n          action: 'replace',\n          json: params\n        },\n        null,\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to create contract leave', deffered)) {\n            return;\n          }\n\n          adjustAddPublicHolidaysValue(data.values);\n\n          deffered.resolve(data.values);\n        },\n        function () {\n          deffered.reject('Unable to create contract details');\n        });\n\n        return deffered.promise;\n      },\n      model: function (fields, leaveType) {\n        var deffered = $q.defer();\n        var leaveTypePromise = !leaveType || typeof leaveType !== 'object' ? getAbsenceTypes() : leaveType;\n\n        function createModel (leaveType, fields) {\n          var i = 0;\n          var len = fields.length;\n          var model = [];\n          var modelEntry = {};\n\n          for (i; i < len; i++) {\n            modelEntry[fields[i].name] = '';\n          }\n\n          if (typeof modelEntry.id !== 'undefined') {\n            modelEntry.id = null;\n          }\n\n          if (typeof modelEntry.jobcontract_revision_id !== 'undefined') {\n            modelEntry.jobcontract_revision_id = null;\n          }\n\n          if (typeof modelEntry.location !== 'undefined') {\n            modelEntry.location = null;\n          }\n\n          if ((!leaveType || typeof leaveType !== 'object') ||\n            (!modelEntry || typeof modelEntry !== 'object' || typeof modelEntry.leave_type === 'undefined')) {\n            return null;\n          }\n\n          /**\n           * This is a little helper method to calculate the estimated leave amount for a\n           * leave type.\n           *\n           * If this leave type has \"add_public_holidays\" set, the estimated amount will be\n           * the leave amount + the given number of Public Holidays. Otherwise, the estimated\n           * amount is the same as the leave amount.\n           *\n           * @param {number} numberOfPublicHolidays\n           * @returns {number}\n           */\n          modelEntry.getEstimatedLeaveAmount = function (numberOfPublicHolidays) {\n            if (this.add_public_holidays && numberOfPublicHolidays) {\n              return parseFloat(this.leave_amount) + numberOfPublicHolidays;\n            }\n\n            return this.leave_amount;\n          };\n\n          _.each(leaveType, function (type) {\n            modelEntry.leave_type = type.id;\n            modelEntry.leave_type_title = type.title;\n            modelEntry.leave_calculation_unit_name = type.calculation_unit_name;\n            modelEntry.leave_calculation_unit_label = type.calculation_unit_label;\n            modelEntry.leave_amount = 0;\n            modelEntry.is_add_public_holidays_readonly = type.calculation_unit_name === 'hours';\n            modelEntry.add_public_holidays = !!+type.add_public_holiday_to_entitlement;\n\n            model.push(_.cloneDeep(modelEntry));\n          });\n\n          return model;\n        }\n\n        if (fields) {\n          $q.when(leaveTypePromise).then(function (options) {\n            deffered.resolve(createModel(options, fields));\n          });\n        } else {\n          this.getFields().then(function (fields) {\n            $q.when(leaveTypePromise).then(function (options) {\n              deffered.resolve(createModel(options, fields));\n            });\n          });\n        }\n\n        return deffered.promise;\n      }\n    };\n\n    /**\n     * The API returns values as strings, so we convert them to booleans to\n     * make it easy to use them inside conditions\n     *\n     * @param {Object} values - The values object as returned by the API\n     */\n    function adjustAddPublicHolidaysValue (values) {\n      _.each(values, function (value) {\n        value.add_public_holidays = !!parseInt(value.add_public_holidays);\n      });\n    }\n\n    /**\n     * Gets Absence Types and populates calculation units to them\n     *\n     * @return {Promise} resolved with absence types\n     */\n    function getAbsenceTypes () {\n      return AbsenceType.all({ options: { sort: 'weight ASC' } })\n        .then(AbsenceType.loadCalculationUnits);\n    }\n  }\n\n  return contractLeaveService;\n});\n\n//# sourceURL=/job-contract/services/contract-leave.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-pay.service',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  contractPayService.__name = 'contractPayService';\n  contractPayService.$inject = [\n    '$resource', 'settings', '$q', 'utilsService', '$log'\n  ];\n\n  function contractPayService ($resource, settings, $q, utilsService, $log) {\n    $log.debug('Service: contractPayService');\n\n    var ContractPay = $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobPay',\n      json: {}\n    });\n\n    return {\n      getOne: function (params) {\n        if ((!params || typeof params !== 'object') ||\n          (!params.jobcontract_revision_id) ||\n          (params.jobcontract_revision_id && typeof +params.jobcontract_revision_id !== 'number')) {\n          return null;\n        }\n\n        params.sequential = 1;\n        params.debug = settings.debug;\n\n        var deffered = $q.defer();\n        var val;\n\n        ContractPay.get({\n          json: params\n        },\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contract pay', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to fetch contract pay');\n        });\n\n        return deffered.promise;\n      },\n      getOptions: function (fieldName, callAPI) {\n        var deffered = $q.defer();\n        var data;\n\n        if (!callAPI) {\n          data = settings.CRM.options.HRJobPay || {};\n\n          if (fieldName && typeof fieldName === 'string') {\n            data = data[fieldName];\n          }\n\n          deffered.resolve(data || {});\n        } else {\n          // TODO call2API\n        }\n\n        return deffered.promise;\n      },\n      getFields: function (params) {\n        if (params && typeof params !== 'object') {\n          return null;\n        }\n\n        if (!params || typeof params !== 'object') {\n          params = {};\n        }\n\n        var deffered = $q.defer();\n        var crmFields = settings.CRM.fields;\n\n        if (crmFields && crmFields.HRJobPay) {\n          deffered.resolve(crmFields.HRJobPay);\n        } else {\n          params.sequential = 1;\n\n          ContractPay.get({\n            action: 'getfields',\n            json: params\n          },\n          function (data) {\n            if (!data.values) {\n              deffered.reject('Unable to fetch contract pay fields');\n            }\n\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to fetch contract pay fields');\n          });\n        }\n\n        return deffered.promise;\n      },\n      save: function (contractPay) {\n        if (!contractPay || typeof contractPay !== 'object') {\n          return null;\n        }\n\n        var deffered = $q.defer();\n        var params = angular.extend({\n          sequential: 1,\n          debug: settings.debug\n        }, contractPay);\n        var val;\n\n        ContractPay.save({\n          action: 'create',\n          json: params\n        },\n        null,\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to create contract pay', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to create contract pay');\n        });\n\n        return deffered.promise;\n      },\n      model: function (fields) {\n        var deffered = $q.defer();\n\n        function createModel (fields) {\n          var i = 0;\n          var len = fields.length;\n          var model = {};\n\n          for (i; i < len; i++) {\n            model[fields[i].name] = '';\n          }\n\n          if (typeof model.id !== 'undefined') {\n            model.id = null;\n          }\n\n          if (typeof model.jobcontract_revision_id !== 'undefined') {\n            model.jobcontract_revision_id = null;\n          }\n\n          if (typeof model.annual_benefits !== 'undefined') {\n            model.annual_benefits = [];\n          }\n\n          if (typeof model.annual_deductions !== 'undefined') {\n            model.annual_deductions = [];\n          }\n\n          return model;\n        }\n\n        if (fields) {\n          deffered.resolve(createModel(fields));\n        } else {\n          this.getFields().then(function (fields) {\n            deffered.resolve(createModel(fields));\n          });\n        }\n\n        return deffered.promise;\n      }\n    };\n  }\n\n  return contractPayService;\n});\n\n//# sourceURL=/job-contract/services/contract-pay.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-pension.service',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  contractPensionService.__name = 'contractPensionService';\n  contractPensionService.$inject = [\n    '$resource', 'settings', '$q', 'utilsService', '$log'\n  ];\n\n  function contractPensionService ($resource, settings, $q, utilsService, $log) {\n    $log.debug('Service: contractPensionService');\n\n    var ContractPension = $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobPension',\n      json: {}\n    });\n\n    return {\n      getOne: function (params) {\n        if ((!params || typeof params !== 'object') ||\n          (!params.jobcontract_revision_id) ||\n          (params.jobcontract_revision_id && typeof +params.jobcontract_revision_id !== 'number')) {\n          return null;\n        }\n\n        params.sequential = 1;\n        params.debug = settings.debug;\n\n        var deffered = $q.defer();\n        var val;\n\n        ContractPension.get({\n          json: params\n        },\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to fetch contract pension', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to fetch contract pension');\n        });\n\n        return deffered.promise;\n      },\n      getOptions: function (fieldName, callAPI) {\n        var deffered = $q.defer();\n        var data;\n\n        if (!callAPI) {\n          data = settings.CRM.options.HRJobPension || {};\n\n          if (fieldName && typeof fieldName === 'string') {\n            data = data[fieldName];\n          }\n\n          deffered.resolve(data || {});\n        } else {\n          // TODO call2API\n        }\n\n        return deffered.promise;\n      },\n      getFields: function (params) {\n        if (params && typeof params !== 'object') {\n          return null;\n        }\n\n        if (!params || typeof params !== 'object') {\n          params = {};\n        }\n\n        var deffered = $q.defer();\n        var crmFields = settings.CRM.fields;\n\n        if (crmFields && crmFields.HRJobPension) {\n          deffered.resolve(crmFields.HRJobPension);\n        } else {\n          params.sequential = 1;\n\n          ContractPension.get({\n            action: 'getfields',\n            json: params\n          },\n          function (data) {\n            if (!data.values) {\n              deffered.reject('Unable to fetch contract pension fields');\n            }\n\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to fetch contract pension fields');\n          });\n        }\n\n        return deffered.promise;\n      },\n      save: function (contractPension) {\n        if (!contractPension || typeof contractPension !== 'object') {\n          return null;\n        }\n\n        var deffered = $q.defer();\n        var params = angular.extend({\n          sequential: 1,\n          debug: settings.debug\n        }, contractPension);\n        var val;\n\n        ContractPension.save({\n          action: 'create',\n          json: params\n        },\n        null,\n        function (data) {\n          if (utilsService.errorHandler(data, 'Unable to create contract pension', deffered)) {\n            return;\n          }\n\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        },\n        function () {\n          deffered.reject('Unable to create contract pension');\n        });\n\n        return deffered.promise;\n      },\n      model: function (fields) {\n        var deffered = $q.defer();\n\n        function createModel (fields) {\n          var i = 0;\n          var len = fields.length;\n          var model = {};\n\n          for (i; i < len; i++) {\n            model[fields[i].name] = '';\n          }\n\n          if (typeof model.id !== 'undefined') {\n            model.id = null;\n          }\n\n          if (typeof model.jobcontract_revision_id !== 'undefined') {\n            model.jobcontract_revision_id = null;\n          }\n\n          return model;\n        }\n\n        if (fields) {\n          deffered.resolve(createModel(fields));\n        } else {\n          this.getFields().then(function (fields) {\n            deffered.resolve(createModel(fields));\n          });\n        }\n\n        return deffered.promise;\n      }\n    };\n  }\n\n  return contractPensionService;\n});\n\n//# sourceURL=/job-contract/services/contract-pension.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-revision-list.service',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  contractRevisionListService.__name = 'contractRevisionListService';\n  contractRevisionListService.$inject = [\n    '$filter', '$q', '$log', 'contractService', 'contractFilesService',\n    'contractRevisionService'\n  ];\n\n  function contractRevisionListService ($filter, $q, $log, contractService,\n    contractFilesService, contractRevisionService) {\n    $log.debug('Service: contractRevisionListService');\n\n    return {\n      fetchRevisions: fetchRevisions\n    };\n\n    /**\n     * Takes in a bulk of data, the result of a joined api call, and\n     * returns an object containing such data divided in different properties\n     *\n     * @param  {Object} aggregated\n     * @return {Object}\n     */\n    function expandAggregatedRevisionDetails (aggregated) {\n      return {\n        details: {\n          position: aggregated['details_revision_id.position'],\n          location: aggregated['details_revision_id.location']\n        },\n        hour: {\n          hours_type: aggregated['hour_revision_id.hours_type']\n        },\n        pay: {\n          pay_annualized_est: aggregated['pay_revision_id.pay_annualized_est'],\n          pay_currency: aggregated['pay_revision_id.pay_currency'],\n          pay_scale: aggregated['pay_revision_id.pay_scale']\n        }\n      };\n    }\n\n    /**\n     * Fetches the details of the given revision, like files, pay, etc\n     *\n     * The bulk of the data is fetched via a joined api call, whose aggregated\n     * result is then expanded before being returned\n     *\n     * @param  {Object} revision\n     * @return {Promise} resolves to an object containing the details\n     */\n    function fetchRevisionDetails (revision) {\n      revision.effective_date = revision.effective_date || '';\n\n      return $q.all({\n        files: {\n          details: contractFilesService.get(revision.details_revision_id, 'civicrm_hrjobcontract_details')\n        },\n        aggregated: contractRevisionService.get({\n          action: 'getsingle',\n          json: {\n            sequential: 1,\n            id: revision.id,\n            return: [\n              'details_revision_id.position',\n              'details_revision_id.location',\n              'hour_revision_id.hours_type',\n              'pay_revision_id.pay_scale',\n              'pay_revision_id.pay_annualized_est',\n              'pay_revision_id.pay_currency'\n            ]\n          }\n        })\n         .$promise.then(function (aggregated) {\n           return aggregated;\n         })\n      })\n       .then(function (results) {\n         return _.assign({\n           revisionEntityIdObj: revision,\n           files: results.files\n         }, expandAggregatedRevisionDetails(results.aggregated));\n       });\n    }\n\n    /**\n     * Fetches available revision list for acontract\n     *\n     * @param  {integer | string} contractId\n     * @return {object}\n     */\n    function fetchRevisions (contractId) {\n      var RevisionList = [];\n      var deferred = $q.defer();\n\n      contractService.getRevision(contractId)\n        .then(function (revisionList) {\n          RevisionList = $filter('orderBy')(revisionList, ['-effective_date', '-id']);\n\n          return $q.all(RevisionList.map(fetchRevisionDetails));\n        })\n        .then(function (results) {\n          deferred.resolve({\n            revisionList: RevisionList,\n            revisionDataList: results\n          });\n        });\n\n      return deferred.promise;\n    }\n  }\n\n  return contractRevisionListService;\n});\n\n//# sourceURL=/job-contract/services/contract-revision-list.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-revision.service',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  contractRevisionService.__name = 'contractRevisionService';\n  contractRevisionService.$inject = [\n    '$filter', '$resource', 'settings', '$q', 'utilsService', '$log'\n  ];\n\n  function contractRevisionService ($filter, $resource, settings, $q,\n    utilsService, $log) {\n    $log.debug('Service: contractRevisionService');\n\n    return _.assign($resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobContractRevision',\n      json: {}\n    }), {\n\n      /**\n       * Validate if a given effective date isn't the equal to any other\n       * contract revision effective date for a given contact\n       *\n       * @param {object} params A list of parameters to pass to the API end-point\n       *   which must contain 'contact_id' and 'effective_date'\n       * @returns {*}\n       */\n      validateEffectiveDate: function (params) {\n        params.effective_date = convertToDateString(params.effective_date);\n        params.sequential = 0;\n        params.debug = settings.debug;\n\n        return this.save({\n          action: 'validateeffectivedate',\n          json: params\n        }, null)\n        .$promise.then(function (result) {\n          return result.values;\n        });\n      }\n    });\n\n    /**\n     * If parameter passed is a Date object, it converts it into a string\n     *\n     * @param {Date} dateObj\n     * @return {string/any}\n     */\n    function convertToDateString (dateObj) {\n      var dateString = $filter('formatDate')(dateObj, 'YYYY-MM-DD');\n\n      return dateString !== 'Unspecified' ? dateString : dateObj;\n    }\n  }\n\n  return contractRevisionService;\n});\n\n//# sourceURL=/job-contract/services/contract-revision.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-service.service',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  contractService.__name = 'contractService';\n  contractService.$inject = [\n    '$log', '$q', 'Contract', 'contractRevisionService', 'settings', 'utilsService',\n    'DOMEventTrigger', 'AbsenceType'\n  ];\n\n  function contractService ($log, $q, Contract, contractRevisionService, settings,\n    utilsService, DOMEventTrigger, AbsenceType) {\n    $log.debug('Service: contractService');\n\n    return {\n      get: function (contactId) {\n        var deffered = $q.defer();\n        var params = {};\n\n        if (!CRM || !CRM.jobContractTabApp || !CRM.jobContractTabApp.contractList) {\n          params = {\n            sequential: 1,\n            contact_id: settings.contactId,\n            deleted: 0\n          };\n\n          if (contactId && typeof +contactId === 'number') {\n            params.contact_id = contactId;\n          }\n\n          Contract.get({\n            json: params\n          }, function (data) {\n            if (utilsService.errorHandler(data, 'Unable to fetch contract list', deffered)) {\n              return;\n            }\n\n            deffered.resolve(data.values);\n          }, function () {\n            deffered.reject('Unable to fetch contract list');\n          });\n        } else {\n          deffered.resolve(CRM.jobContractTabApp.contractList);\n        }\n\n        return deffered.promise;\n      },\n\n      /**\n       * Perform an ajax request and call HrJobContract => getcurrentcontract\n       * API method which is used to get the current contract for the contact\n       * or null if it is not exist.\n       *\n       * @param contactId :the current contact ID\n       */\n      getCurrentContract: function (contactId) {\n        var deffered = $q.defer();\n\n        Contract.get({\n          action: 'getcurrentcontract',\n          json: {\n            'contact_id': contactId\n          }\n        }, function (data) {\n          if (data.is_error) {\n            deffered.reject('Unable to fetch the current contract');\n          }\n          deffered.resolve(data.values);\n        }, function () {\n          deffered.reject('Unable to fetch the current contract');\n        });\n\n        return deffered.promise;\n      },\n\n      /**\n       * Triggers the update of the contact header via the `hrui` extension\n       * by emitting a DOM event with the contract data\n       */\n      updateHeaderInfo: function () {\n        this.getCurrentContract(settings.contactId)\n          .then(function (currentContract) {\n            DOMEventTrigger('updateContactHeader', {\n              contract: currentContract\n            });\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      },\n      getOne: function (contractId, contactId) {\n        var val;\n        var deffered = $q.defer();\n        var params = {\n          deleted: 0,\n          sequential: 1,\n          contact_id: settings.contactId,\n          id: contractId\n        };\n\n        if (!contractId || typeof +contractId !== 'number') {\n          return null;\n        }\n\n        if (contactId && typeof +contactId === 'number') {\n          params.contact_id = contactId;\n        }\n\n        Contract.get({\n          json: params\n        }, function (data) {\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        }, function () {\n          deffered.reject('Unable to fetch contract data');\n        });\n\n        return deffered.promise;\n      },\n      getRevision: function (contractId) {\n        var deffered = $q.defer();\n        var params = {\n          deleted: 0,\n          options: {\n            limit: 0\n          },\n          sequential: 1,\n          jobcontract_id: contractId\n        };\n\n        if (!contractId || typeof +contractId !== 'number') {\n          return null;\n        }\n\n        contractRevisionService.get({\n          json: params\n        }, function (data) {\n          deffered.resolve(data.values);\n        }, function () {\n          deffered.reject('Unable to fetch contract revisions');\n        });\n\n        return deffered.promise;\n      },\n      getRevisionOptions: function (fieldName, callAPI) {\n        var data;\n        var deffered = $q.defer();\n\n        if (!callAPI) {\n          data = settings.CRM.options.HRJobContractRevision || {};\n\n          if (fieldName && typeof fieldName === 'string') {\n            data = data[fieldName];\n          }\n\n          deffered.resolve(data || {});\n        } else {\n          // TODO call2API\n        }\n\n        return deffered.promise;\n      },\n      save: function (contractDetails) {\n        var val;\n        var deffered = $q.defer();\n        var params = _.extend({\n          deleted: 0,\n          sequential: 1\n        }, contractDetails);\n\n        if ((!contractDetails || typeof contractDetails !== 'object') ||\n          (!contractDetails.id || typeof +contractDetails.id !== 'number')) {\n          return null;\n        }\n\n        Contract.save({\n          action: 'create',\n          json: params\n        }, null, function (data) {\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        }, function () {\n          deffered.reject('Unable to fetch contract contract data');\n        });\n\n        return deffered.promise;\n      },\n      saveRevision: function (revisionDetails) {\n        var val;\n        var deffered = $q.defer();\n        var params = _.extend({\n          deleted: 0,\n          sequential: 1\n        }, revisionDetails);\n\n        if ((!revisionDetails || typeof revisionDetails !== 'object') ||\n          (!revisionDetails.id || typeof +revisionDetails.id !== 'number')) {\n          return null;\n        }\n\n        contractRevisionService.save({\n          action: 'create',\n          json: params\n        }, null, function (data) {\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        }, function () {\n          deffered.reject('Unable to fetch contract revision');\n        });\n\n        return deffered.promise;\n      },\n      delete: function (contractId) {\n        var deffered = $q.defer();\n\n        if (!contractId || typeof +contractId !== 'number') {\n          return null;\n        }\n\n        Contract.delete({\n          action: 'deletecontract',\n          json: {\n            id: contractId\n          }\n        }, function (data) {\n          deffered.resolve(data);\n        }, function () {\n          deffered.reject('Could not delete contract ID:' + contractId);\n        });\n\n        return deffered.promise;\n      },\n      deleteRevision: function (revisionId) {\n        var val;\n        var deffered = $q.defer();\n\n        if (!revisionId || typeof +revisionId !== 'number') {\n          return null;\n        }\n\n        contractRevisionService.save({\n          action: 'create',\n          json: {\n            sequential: 1,\n            deleted: 1,\n            id: revisionId\n          }\n        }, null, function (data) {\n          val = data.values;\n          deffered.resolve(val.length === 1 ? val[0] : null);\n        }, function () {\n          deffered.reject('Unable to delete contract revision id: ' + revisionId);\n        });\n\n        return deffered.promise;\n      },\n\n      /**\n       * Returns the full details of a contract via the related custom api endpoint\n       *\n       * @param  {int} contractId\n       * @return {Promise} resolves with the api response\n       */\n      fullDetails: function (contractId) {\n        var deferred = $q.defer();\n\n        if (!contractId || typeof +contractId !== 'number') {\n          return null;\n        }\n\n        AbsenceType.all()\n        .then(AbsenceType.loadCalculationUnits)\n        .then(function (absenceTypes) {\n          return Contract.get({\n            action: 'getfulldetails',\n            json: {\n              jobcontract_id: contractId\n            }\n          }, function (contract) {\n            contract.leave = filterOutDisabledAbsenceTypes(contract.leave, absenceTypes);\n\n            adjustAddPublicHolidaysValue(contract, _.indexBy(absenceTypes, 'id'));\n            deferred.resolve(contract);\n          }, function () {\n            deferred.reject('Could not fetch full details for contract ID:' + contractId);\n          });\n        });\n\n        return deferred.promise;\n      }\n    };\n\n    /**\n     * The API returns values as strings, so we convert them to booleans to\n     * make it easy to use them inside conditions\n     *\n     * @param {Object} contract as returned by the API\n     * @param {Object} absenceTypes indexed by their IDs\n     */\n    function adjustAddPublicHolidaysValue (contract, absenceTypes) {\n      _.each(contract.leave, function (leave) {\n        leave.add_public_holidays =\n          absenceTypes[leave.leave_type].calculation_unit_name !== 'hours' &&\n          !!parseInt(leave.add_public_holidays);\n      });\n    }\n\n    /**\n     * Filters out disabled or non-existing anymore Absence Types\n     * from the contract leave details\n     *\n     * @param  {Object} contractLeaves leave property of contract (as returned by the API)\n     * @param  {Array}  absenceTypes as returned by API\n     * @return {Array}  filtered out contract leave details\n     */\n    function filterOutDisabledAbsenceTypes (contractLeaves, absenceTypes) {\n      return _.filter(contractLeaves, function (leave) {\n        if (_.find(absenceTypes, { id: leave.leave_type })) {\n          return leave;\n        }\n      });\n    }\n  }\n\n  return contractService;\n});\n\n//# sourceURL=/job-contract/services/contract-service.service.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/services/utils.service',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  utilsService.__name = 'utilsService';\n  utilsService.$inject = ['apiService', 'settings', '$q', '$log', '$timeout'];\n\n  function utilsService (API, settings, $q, $log, $timeout) {\n    return {\n\n      /**\n       * Returns a promise that resolves to an array with including all of the Absence Types.\n       *\n       * Each returned Absence Type includes these fields:\n       * - id\n       * - title\n       * - default_entitlement\n       * - add_public_holiday_to_entitlement\n       *\n       * @returns {Promise}\n       */\n      getAbsenceTypes: function () {\n        var deffered = $q.defer();\n\n        API.resource('AbsenceType', 'get', {\n          'return': 'id,title,default_entitlement,add_public_holiday_to_entitlement'\n        }).get(function (data) {\n          angular.forEach(data.values, function (value) {\n            value.add_public_holiday_to_entitlement = !!parseInt(value.add_public_holiday_to_entitlement);\n            // The default_entitlement is return by the API as a string\n            // so here we cast it to a float, to make it easy to do calculations and\n            // to display the value in forms\n            value.default_entitlement = parseFloat(value.default_entitlement);\n          });\n\n          deffered.resolve(data.values);\n        }, function () {\n          deffered.reject('Unable to fetch absence types');\n        });\n\n        return deffered.promise;\n      },\n\n      getHoursLocation: function () {\n        var deffered = $q.defer();\n\n        API.resource('HRHoursLocation', 'get', {\n          sequential: 1,\n          is_active: 1\n        }).get(function (data) {\n          deffered.resolve(data.values);\n        }, function () {\n          deffered.reject('Unable to fetch standard hours');\n        });\n\n        return deffered.promise;\n      },\n      getPayScaleGrade: function () {\n        var deffered = $q.defer();\n\n        API.resource('HRPayScale', 'get', {\n          sequential: 1,\n          is_active: 1\n        }).get(function (data) {\n          deffered.resolve(data.values);\n        }, function () {\n          deffered.reject('Unable to fetch standard hours');\n        });\n\n        return deffered.promise;\n      },\n\n      /**\n       * Returns a promise that resolves the an int with the number of Public Holidays in the\n       * current Absence Period\n       *\n       * @returns {Promise}\n       */\n      getNumberOfPublicHolidaysInCurrentPeriod: function () {\n        var deffered = $q.defer();\n\n        API.resource('PublicHoliday', 'getcountforcurrentperiod', {\n          sequential: 1\n        }).get(function (data) {\n          var number = parseInt(data.result) || 0;\n\n          deffered.resolve(number);\n        }, function () {\n          deffered.reject('Unable to fetch the number of public holidays in current period');\n        });\n\n        return deffered.promise;\n      },\n\n      prepareEntityIds: function (entityObj, contractId, revisionId) {\n        function setIds (entityObj) {\n          entityObj.jobcontract_id = contractId;\n          delete entityObj.id;\n          revisionId ? entityObj.jobcontract_revision_id = revisionId : delete entityObj.jobcontract_revision_id;\n        }\n\n        if (angular.isArray(entityObj)) {\n          var i = 0;\n          var len = entityObj.length;\n\n          for (i; i < len; i++) {\n            setIds(entityObj[i]);\n          }\n\n          return;\n        }\n\n        if (angular.isObject(entityObj)) {\n          setIds(entityObj);\n        }\n      },\n      errorHandler: function (data, msg, deffered) {\n        var errorMsg;\n\n        if (data.is_error) {\n          errorMsg = data.error_message.split('_').join(' ');\n          errorMsg = errorMsg.charAt(0).toUpperCase() + errorMsg.slice(1);\n\n          $log.error('Unable to save. ' + '\\n' + errorMsg);\n\n          if (deffered) {\n            deffered.reject('Unable to save. ' + '\\n' + errorMsg);\n          }\n\n          if (data.trace) {\n            $log.error(data.trace);\n          }\n\n          return true;\n        }\n\n        if (!data.values) {\n          $log.error(msg || 'Unknown Error');\n\n          if (deffered) {\n            deffered.reject(msg || 'Unknown Error');\n          }\n          return true;\n        }\n      },\n\n      /**\n       * Returns the URL to the Manage Entitlement page.\n       *\n       * The given contact ID is added to the URL, as the cid parameter.\n       *\n       * @param {int} contactId\n       */\n      getManageEntitlementsPageURL: function (contactId) {\n        var path = 'civicrm/admin/leaveandabsences/periods/manage_entitlements';\n        var returnPath = 'civicrm/contact/view';\n        var returnUrl = CRM.url(returnPath, { cid: contactId, selectedChild: 'hrjobcontract' });\n        return CRM.url(path, { cid: contactId, returnUrl: returnUrl });\n      }\n    };\n  }\n\n  return utilsService;\n});\n\n//# sourceURL=/job-contract/services/utils.service.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.services',[\n  'common/angular',\n  'job-contract/services/api.service',\n  'job-contract/services/contact.service',\n  'job-contract/services/contract.service',\n  'job-contract/services/contract-details.service',\n  'job-contract/services/contract-files.service',\n  'job-contract/services/contract-health.service',\n  'job-contract/services/contract-hour.service',\n  'job-contract/services/contract-leave.service',\n  'job-contract/services/contract-pay.service',\n  'job-contract/services/contract-pension.service',\n  'job-contract/services/contract-revision-list.service',\n  'job-contract/services/contract-revision.service',\n  'job-contract/services/contract-service.service',\n  'job-contract/services/utils.service'\n], function (angular, apiService, contactService, contract, contractDetailsService,\n  contractFilesService, contractHealthService, contractHourService, contractLeaveService,\n  contractPayService, contractPensionService, contractRevisionListService, contractRevisionService,\n  contractService, utilsService) {\n  'use strict';\n\n  return angular.module('job-contract.services', [])\n    .factory(apiService.__name, apiService)\n    .factory(contactService.__name, contactService)\n    .factory(contract.__name, contract)\n    .factory(contractDetailsService.__name, contractDetailsService)\n    .factory(contractFilesService.__name, contractFilesService)\n    .factory(contractHealthService.__name, contractHealthService)\n    .factory(contractHourService.__name, contractHourService)\n    .factory(contractLeaveService.__name, contractLeaveService)\n    .factory(contractPayService.__name, contractPayService)\n    .factory(contractPensionService.__name, contractPensionService)\n    .factory(contractRevisionListService.__name, contractRevisionListService)\n    .factory(contractRevisionService.__name, contractRevisionService)\n    .factory(contractService.__name, contractService)\n    .factory(utilsService.__name, utilsService);\n});\n\n//# sourceURL=/job-contract/modules/job-contract.services.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/modules/job-contract.module',[\n  'common/angular',\n  'job-contract/modules/job-contract.config',\n  'job-contract/modules/job-contract.constants',\n  'job-contract/modules/job-contract.controllers',\n  'job-contract/modules/job-contract.core',\n  'job-contract/modules/job-contract.directives',\n  'job-contract/modules/job-contract.filters',\n  'job-contract/modules/job-contract.run',\n  'job-contract/modules/job-contract.services'\n], function (angular) {\n  'use strict';\n\n  angular.module('job-contract', [\n    'job-contract.core',\n    'job-contract.config',\n    'job-contract.run',\n    'job-contract.constants',\n    'job-contract.controllers',\n    'job-contract.directives',\n    'job-contract.filters',\n    'job-contract.services'\n  ]);\n});\n\n//# sourceURL=/job-contract/modules/job-contract.module.js"),eval("/* eslint-env amd */\n\n(function (CRM, require) {\n  var extPath = CRM.jobContractTabApp.path + 'js/src/job-contract';\n\n  require.config({\n    urlArgs: 'bust=' + (new Date()).getTime(),\n    paths: {\n      'job-contract': extPath,\n      'job-contract/vendor/fraction': extPath + '/vendor/fraction',\n      'job-contract/vendor/job-summary': extPath + '/vendor/jobsummary'\n    },\n    shim: {\n      'job-contract/vendor/job-summary': {\n        deps: ['common/moment']\n      }\n    }\n  });\n\n  require([\n    'job-contract/modules/job-contract.module'\n  ], function () {\n    'use strict';\n\n    document.dispatchEvent(typeof window.CustomEvent === 'function' ? new window.CustomEvent('hrjcReady') : (function () {\n      var e = document.createEvent('Event');\n      e.initEvent('hrjcReady', true, true);\n      return e;\n    })());\n  });\n})(CRM, require);\n\n//# sourceURL=/job-contract.js");
//# sourceMappingURL=job-contract.min.js.map